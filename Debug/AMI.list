
AMI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c50  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002e14  08002e14  00003e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e2c  08002e2c  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002e2c  08002e2c  00003e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e34  08002e34  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e34  08002e34  00003e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002e38  08002e38  00003e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002e3c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  08002e48  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08002e48  00004104  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c34d  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019f0  00000000  00000000  00010389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c08  00000000  00000000  00011d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000975  00000000  00000000  00012988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020ef9  00000000  00000000  000132fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e23d  00000000  00000000  000341f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ccedc  00000000  00000000  00042433  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010f30f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032f4  00000000  00000000  0010f354  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  00112648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002dfc 	.word	0x08002dfc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002dfc 	.word	0x08002dfc

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
void PlayNote1(uint16_t frequency);
void PlayNote2(uint16_t frequency);
void StopNote(void);

int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
    HAL_Init();
 80004fa:	f000 fb99 	bl	8000c30 <HAL_Init>
    SystemClock_Config();
 80004fe:	f000 f8f5 	bl	80006ec <SystemClock_Config>
    MX_GPIO_Init();
 8000502:	f000 f9d5 	bl	80008b0 <MX_GPIO_Init>
    MX_USART2_UART_Init();
 8000506:	f000 f9a9 	bl	800085c <MX_USART2_UART_Init>
    MX_TIM2_Init();
 800050a:	f000 f94f 	bl	80007ac <MX_TIM2_Init>

    HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 800050e:	2201      	movs	r2, #1
 8000510:	4971      	ldr	r1, [pc, #452]	@ (80006d8 <main+0x1e4>)
 8000512:	4872      	ldr	r0, [pc, #456]	@ (80006dc <main+0x1e8>)
 8000514:	f002 f972 	bl	80027fc <HAL_UART_Receive_IT>

    while (1)
    {
        if (rx_read_index != rx_write_index) {
 8000518:	4b71      	ldr	r3, [pc, #452]	@ (80006e0 <main+0x1ec>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	b2da      	uxtb	r2, r3
 800051e:	4b71      	ldr	r3, [pc, #452]	@ (80006e4 <main+0x1f0>)
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	b2db      	uxtb	r3, r3
 8000524:	429a      	cmp	r2, r3
 8000526:	d0f7      	beq.n	8000518 <main+0x24>
            uint8_t data = rx_buffer[rx_read_index];
 8000528:	4b6d      	ldr	r3, [pc, #436]	@ (80006e0 <main+0x1ec>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	b2db      	uxtb	r3, r3
 800052e:	461a      	mov	r2, r3
 8000530:	4b6d      	ldr	r3, [pc, #436]	@ (80006e8 <main+0x1f4>)
 8000532:	5c9b      	ldrb	r3, [r3, r2]
 8000534:	71fb      	strb	r3, [r7, #7]
            rx_read_index = (rx_read_index + 1) % BUFFER_SIZE;
 8000536:	4b6a      	ldr	r3, [pc, #424]	@ (80006e0 <main+0x1ec>)
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	b2db      	uxtb	r3, r3
 800053c:	3301      	adds	r3, #1
 800053e:	425a      	negs	r2, r3
 8000540:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000544:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000548:	bf58      	it	pl
 800054a:	4253      	negpl	r3, r2
 800054c:	b2da      	uxtb	r2, r3
 800054e:	4b64      	ldr	r3, [pc, #400]	@ (80006e0 <main+0x1ec>)
 8000550:	701a      	strb	r2, [r3, #0]

            switch (data) {
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	3b41      	subs	r3, #65	@ 0x41
 8000556:	2b19      	cmp	r3, #25
 8000558:	f200 80ba 	bhi.w	80006d0 <main+0x1dc>
 800055c:	a201      	add	r2, pc, #4	@ (adr r2, 8000564 <main+0x70>)
 800055e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000562:	bf00      	nop
 8000564:	080005cd 	.word	0x080005cd
 8000568:	080006bd 	.word	0x080006bd
 800056c:	080006a9 	.word	0x080006a9
 8000570:	08000645 	.word	0x08000645
 8000574:	080005e1 	.word	0x080005e1
 8000578:	0800064f 	.word	0x0800064f
 800057c:	08000659 	.word	0x08000659
 8000580:	08000663 	.word	0x08000663
 8000584:	08000613 	.word	0x08000613
 8000588:	0800066d 	.word	0x0800066d
 800058c:	08000677 	.word	0x08000677
 8000590:	08000681 	.word	0x08000681
 8000594:	0800068b 	.word	0x0800068b
 8000598:	080006c7 	.word	0x080006c7
 800059c:	0800061d 	.word	0x0800061d
 80005a0:	08000627 	.word	0x08000627
 80005a4:	08000631 	.word	0x08000631
 80005a8:	080005eb 	.word	0x080005eb
 80005ac:	0800063b 	.word	0x0800063b
 80005b0:	080005f5 	.word	0x080005f5
 80005b4:	08000609 	.word	0x08000609
 80005b8:	080006b3 	.word	0x080006b3
 80005bc:	08000695 	.word	0x08000695
 80005c0:	0800069f 	.word	0x0800069f
 80005c4:	080005ff 	.word	0x080005ff
 80005c8:	080005d7 	.word	0x080005d7
                case 'A': PlayNote1(261); break; // do octave 1
 80005cc:	f240 1005 	movw	r0, #261	@ 0x105
 80005d0:	f000 f99e 	bl	8000910 <PlayNote1>
 80005d4:	e07f      	b.n	80006d6 <main+0x1e2>
                case 'Z': PlayNote1(277); break; // do#
 80005d6:	f240 1015 	movw	r0, #277	@ 0x115
 80005da:	f000 f999 	bl	8000910 <PlayNote1>
 80005de:	e07a      	b.n	80006d6 <main+0x1e2>
                case 'E': PlayNote1(293); break; // ré
 80005e0:	f240 1025 	movw	r0, #293	@ 0x125
 80005e4:	f000 f994 	bl	8000910 <PlayNote1>
 80005e8:	e075      	b.n	80006d6 <main+0x1e2>
                case 'R': PlayNote1(311); break; // ré#
 80005ea:	f240 1037 	movw	r0, #311	@ 0x137
 80005ee:	f000 f98f 	bl	8000910 <PlayNote1>
 80005f2:	e070      	b.n	80006d6 <main+0x1e2>
                case 'T': PlayNote1(329); break; // mi
 80005f4:	f240 1049 	movw	r0, #329	@ 0x149
 80005f8:	f000 f98a 	bl	8000910 <PlayNote1>
 80005fc:	e06b      	b.n	80006d6 <main+0x1e2>
                case 'Y': PlayNote1(349); break; // fa
 80005fe:	f240 105d 	movw	r0, #349	@ 0x15d
 8000602:	f000 f985 	bl	8000910 <PlayNote1>
 8000606:	e066      	b.n	80006d6 <main+0x1e2>
                case 'U': PlayNote1(369); break; // fa#
 8000608:	f240 1071 	movw	r0, #369	@ 0x171
 800060c:	f000 f980 	bl	8000910 <PlayNote1>
 8000610:	e061      	b.n	80006d6 <main+0x1e2>
                case 'I': PlayNote1(392); break; // sol
 8000612:	f44f 70c4 	mov.w	r0, #392	@ 0x188
 8000616:	f000 f97b 	bl	8000910 <PlayNote1>
 800061a:	e05c      	b.n	80006d6 <main+0x1e2>
                case 'O': PlayNote1(415); break; // sol#
 800061c:	f240 109f 	movw	r0, #415	@ 0x19f
 8000620:	f000 f976 	bl	8000910 <PlayNote1>
 8000624:	e057      	b.n	80006d6 <main+0x1e2>
                case 'P': PlayNote1(440); break; // la
 8000626:	f44f 70dc 	mov.w	r0, #440	@ 0x1b8
 800062a:	f000 f971 	bl	8000910 <PlayNote1>
 800062e:	e052      	b.n	80006d6 <main+0x1e2>
                case 'Q': PlayNote1(466); break; // la#
 8000630:	f44f 70e9 	mov.w	r0, #466	@ 0x1d2
 8000634:	f000 f96c 	bl	8000910 <PlayNote1>
 8000638:	e04d      	b.n	80006d6 <main+0x1e2>
                case 'S': PlayNote1(493); break; // si
 800063a:	f240 10ed 	movw	r0, #493	@ 0x1ed
 800063e:	f000 f967 	bl	8000910 <PlayNote1>
 8000642:	e048      	b.n	80006d6 <main+0x1e2>
                case 'D': PlayNote1(523); break; // do octave 2
 8000644:	f240 200b 	movw	r0, #523	@ 0x20b
 8000648:	f000 f962 	bl	8000910 <PlayNote1>
 800064c:	e043      	b.n	80006d6 <main+0x1e2>
                case 'F': PlayNote1(261); break; // do octave 1
 800064e:	f240 1005 	movw	r0, #261	@ 0x105
 8000652:	f000 f95d 	bl	8000910 <PlayNote1>
 8000656:	e03e      	b.n	80006d6 <main+0x1e2>
                case 'G': PlayNote2(277); break; // do#
 8000658:	f240 1015 	movw	r0, #277	@ 0x115
 800065c:	f000 f97e 	bl	800095c <PlayNote2>
 8000660:	e039      	b.n	80006d6 <main+0x1e2>
                case 'H': PlayNote1(293); break; // ré
 8000662:	f240 1025 	movw	r0, #293	@ 0x125
 8000666:	f000 f953 	bl	8000910 <PlayNote1>
 800066a:	e034      	b.n	80006d6 <main+0x1e2>
                case 'J': PlayNote2(311); break; // ré#
 800066c:	f240 1037 	movw	r0, #311	@ 0x137
 8000670:	f000 f974 	bl	800095c <PlayNote2>
 8000674:	e02f      	b.n	80006d6 <main+0x1e2>
                case 'K': PlayNote1(329); break; // mi
 8000676:	f240 1049 	movw	r0, #329	@ 0x149
 800067a:	f000 f949 	bl	8000910 <PlayNote1>
 800067e:	e02a      	b.n	80006d6 <main+0x1e2>
                case 'L': PlayNote2(349); break; // fa
 8000680:	f240 105d 	movw	r0, #349	@ 0x15d
 8000684:	f000 f96a 	bl	800095c <PlayNote2>
 8000688:	e025      	b.n	80006d6 <main+0x1e2>
                case 'M': PlayNote1(369); break; // fa#
 800068a:	f240 1071 	movw	r0, #369	@ 0x171
 800068e:	f000 f93f 	bl	8000910 <PlayNote1>
 8000692:	e020      	b.n	80006d6 <main+0x1e2>
                case 'W': PlayNote2(392); break; // sol
 8000694:	f44f 70c4 	mov.w	r0, #392	@ 0x188
 8000698:	f000 f960 	bl	800095c <PlayNote2>
 800069c:	e01b      	b.n	80006d6 <main+0x1e2>
                case 'X': PlayNote1(415); break; // sol#
 800069e:	f240 109f 	movw	r0, #415	@ 0x19f
 80006a2:	f000 f935 	bl	8000910 <PlayNote1>
 80006a6:	e016      	b.n	80006d6 <main+0x1e2>
                case 'C': PlayNote2(440); break; // la
 80006a8:	f44f 70dc 	mov.w	r0, #440	@ 0x1b8
 80006ac:	f000 f956 	bl	800095c <PlayNote2>
 80006b0:	e011      	b.n	80006d6 <main+0x1e2>
                case 'V': PlayNote1(466); break; // la#
 80006b2:	f44f 70e9 	mov.w	r0, #466	@ 0x1d2
 80006b6:	f000 f92b 	bl	8000910 <PlayNote1>
 80006ba:	e00c      	b.n	80006d6 <main+0x1e2>
                case 'B': PlayNote2(493); break; // si
 80006bc:	f240 10ed 	movw	r0, #493	@ 0x1ed
 80006c0:	f000 f94c 	bl	800095c <PlayNote2>
 80006c4:	e007      	b.n	80006d6 <main+0x1e2>
                case 'N': PlayNote1(523); break; // do octave 2
 80006c6:	f240 200b 	movw	r0, #523	@ 0x20b
 80006ca:	f000 f921 	bl	8000910 <PlayNote1>
 80006ce:	e002      	b.n	80006d6 <main+0x1e2>
                default: StopNote(); break;
 80006d0:	f000 f96a 	bl	80009a8 <StopNote>
 80006d4:	bf00      	nop
        if (rx_read_index != rx_write_index) {
 80006d6:	e71f      	b.n	8000518 <main+0x24>
 80006d8:	200000b8 	.word	0x200000b8
 80006dc:	20000070 	.word	0x20000070
 80006e0:	200000fd 	.word	0x200000fd
 80006e4:	200000fc 	.word	0x200000fc
 80006e8:	200000bc 	.word	0x200000bc

080006ec <SystemClock_Config>:
        }
    }
}

void SystemClock_Config(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b094      	sub	sp, #80	@ 0x50
 80006f0:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f2:	f107 031c 	add.w	r3, r7, #28
 80006f6:	2234      	movs	r2, #52	@ 0x34
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f002 fb52 	bl	8002da4 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000700:	f107 0308 	add.w	r3, r7, #8
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]

    __HAL_RCC_PWR_CLK_ENABLE();
 8000710:	2300      	movs	r3, #0
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	4b23      	ldr	r3, [pc, #140]	@ (80007a4 <SystemClock_Config+0xb8>)
 8000716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000718:	4a22      	ldr	r2, [pc, #136]	@ (80007a4 <SystemClock_Config+0xb8>)
 800071a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800071e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000720:	4b20      	ldr	r3, [pc, #128]	@ (80007a4 <SystemClock_Config+0xb8>)
 8000722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000724:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	687b      	ldr	r3, [r7, #4]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800072c:	2300      	movs	r3, #0
 800072e:	603b      	str	r3, [r7, #0]
 8000730:	4b1d      	ldr	r3, [pc, #116]	@ (80007a8 <SystemClock_Config+0xbc>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000738:	4a1b      	ldr	r2, [pc, #108]	@ (80007a8 <SystemClock_Config+0xbc>)
 800073a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800073e:	6013      	str	r3, [r2, #0]
 8000740:	4b19      	ldr	r3, [pc, #100]	@ (80007a8 <SystemClock_Config+0xbc>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000748:	603b      	str	r3, [r7, #0]
 800074a:	683b      	ldr	r3, [r7, #0]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800074c:	2302      	movs	r3, #2
 800074e:	61fb      	str	r3, [r7, #28]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000750:	2301      	movs	r3, #1
 8000752:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000754:	2310      	movs	r3, #16
 8000756:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000758:	2300      	movs	r3, #0
 800075a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075c:	f107 031c 	add.w	r3, r7, #28
 8000760:	4618      	mov	r0, r3
 8000762:	f001 f815 	bl	8001790 <HAL_RCC_OscConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0x84>
    {
        Error_Handler();
 800076c:	f000 f926 	bl	80009bc <Error_Handler>
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000770:	230f      	movs	r3, #15
 8000772:	60bb      	str	r3, [r7, #8]
                                |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000774:	2300      	movs	r3, #0
 8000776:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	61bb      	str	r3, [r7, #24]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000784:	f107 0308 	add.w	r3, r7, #8
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f000 fd3c 	bl	8001208 <HAL_RCC_ClockConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0xae>
    {
        Error_Handler();
 8000796:	f000 f911 	bl	80009bc <Error_Handler>
    }
}
 800079a:	bf00      	nop
 800079c:	3750      	adds	r7, #80	@ 0x50
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40007000 	.word	0x40007000

080007ac <MX_TIM2_Init>:

static void MX_TIM2_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08a      	sub	sp, #40	@ 0x28
 80007b0:	af00      	add	r7, sp, #0
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b2:	f107 0320 	add.w	r3, r7, #32
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
 80007c8:	611a      	str	r2, [r3, #16]
 80007ca:	615a      	str	r2, [r3, #20]
 80007cc:	619a      	str	r2, [r3, #24]

    htim2.Instance = TIM2;
 80007ce:	4b22      	ldr	r3, [pc, #136]	@ (8000858 <MX_TIM2_Init+0xac>)
 80007d0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007d4:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 0;
 80007d6:	4b20      	ldr	r3, [pc, #128]	@ (8000858 <MX_TIM2_Init+0xac>)
 80007d8:	2200      	movs	r2, #0
 80007da:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000858 <MX_TIM2_Init+0xac>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 1000000 / 440 - 1; // Default period for 440 Hz (A4)
 80007e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000858 <MX_TIM2_Init+0xac>)
 80007e4:	f640 02df 	movw	r2, #2271	@ 0x8df
 80007e8:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ea:	4b1b      	ldr	r3, [pc, #108]	@ (8000858 <MX_TIM2_Init+0xac>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f0:	4b19      	ldr	r3, [pc, #100]	@ (8000858 <MX_TIM2_Init+0xac>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007f6:	4818      	ldr	r0, [pc, #96]	@ (8000858 <MX_TIM2_Init+0xac>)
 80007f8:	f001 fa68 	bl	8001ccc <HAL_TIM_PWM_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_TIM2_Init+0x5a>
    {
        Error_Handler();
 8000802:	f000 f8db 	bl	80009bc <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000806:	2300      	movs	r3, #0
 8000808:	623b      	str	r3, [r7, #32]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800080a:	2300      	movs	r3, #0
 800080c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800080e:	f107 0320 	add.w	r3, r7, #32
 8000812:	4619      	mov	r1, r3
 8000814:	4810      	ldr	r0, [pc, #64]	@ (8000858 <MX_TIM2_Init+0xac>)
 8000816:	f001 ff25 	bl	8002664 <HAL_TIMEx_MasterConfigSynchronization>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_TIM2_Init+0x78>
    {
        Error_Handler();
 8000820:	f000 f8cc 	bl	80009bc <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000824:	2360      	movs	r3, #96	@ 0x60
 8000826:	607b      	str	r3, [r7, #4]
    sConfigOC.Pulse = 0;
 8000828:	2300      	movs	r3, #0
 800082a:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800082c:	2300      	movs	r3, #0
 800082e:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
    if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	2200      	movs	r2, #0
 8000838:	4619      	mov	r1, r3
 800083a:	4807      	ldr	r0, [pc, #28]	@ (8000858 <MX_TIM2_Init+0xac>)
 800083c:	f001 fbce 	bl	8001fdc <HAL_TIM_PWM_ConfigChannel>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_TIM2_Init+0x9e>
    {
        Error_Handler();
 8000846:	f000 f8b9 	bl	80009bc <Error_Handler>
    }
    HAL_TIM_MspPostInit(&htim2);
 800084a:	4803      	ldr	r0, [pc, #12]	@ (8000858 <MX_TIM2_Init+0xac>)
 800084c:	f000 f904 	bl	8000a58 <HAL_TIM_MspPostInit>
}
 8000850:	bf00      	nop
 8000852:	3728      	adds	r7, #40	@ 0x28
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20000028 	.word	0x20000028

0800085c <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 8000860:	4b11      	ldr	r3, [pc, #68]	@ (80008a8 <MX_USART2_UART_Init+0x4c>)
 8000862:	4a12      	ldr	r2, [pc, #72]	@ (80008ac <MX_USART2_UART_Init+0x50>)
 8000864:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8000866:	4b10      	ldr	r3, [pc, #64]	@ (80008a8 <MX_USART2_UART_Init+0x4c>)
 8000868:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800086c:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800086e:	4b0e      	ldr	r3, [pc, #56]	@ (80008a8 <MX_USART2_UART_Init+0x4c>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8000874:	4b0c      	ldr	r3, [pc, #48]	@ (80008a8 <MX_USART2_UART_Init+0x4c>)
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 800087a:	4b0b      	ldr	r3, [pc, #44]	@ (80008a8 <MX_USART2_UART_Init+0x4c>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8000880:	4b09      	ldr	r3, [pc, #36]	@ (80008a8 <MX_USART2_UART_Init+0x4c>)
 8000882:	220c      	movs	r2, #12
 8000884:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000886:	4b08      	ldr	r3, [pc, #32]	@ (80008a8 <MX_USART2_UART_Init+0x4c>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800088c:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <MX_USART2_UART_Init+0x4c>)
 800088e:	2200      	movs	r2, #0
 8000890:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK)
 8000892:	4805      	ldr	r0, [pc, #20]	@ (80008a8 <MX_USART2_UART_Init+0x4c>)
 8000894:	f001 ff62 	bl	800275c <HAL_UART_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_USART2_UART_Init+0x46>
    {
        Error_Handler();
 800089e:	f000 f88d 	bl	80009bc <Error_Handler>
    }
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000070 	.word	0x20000070
 80008ac:	40004400 	.word	0x40004400

080008b0 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b086      	sub	sp, #24
 80008b4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c4:	2300      	movs	r3, #0
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000908 <MX_GPIO_Init+0x58>)
 80008ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008cc:	4a0e      	ldr	r2, [pc, #56]	@ (8000908 <MX_GPIO_Init+0x58>)
 80008ce:	f043 0301 	orr.w	r3, r3, #1
 80008d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000908 <MX_GPIO_Init+0x58>)
 80008d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d8:	f003 0301 	and.w	r3, r3, #1
 80008dc:	603b      	str	r3, [r7, #0]
 80008de:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin : PA0 */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008e0:	2301      	movs	r3, #1
 80008e2:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e4:	2302      	movs	r3, #2
 80008e6:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	2300      	movs	r3, #0
 80008ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80008f0:	2301      	movs	r3, #1
 80008f2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	4619      	mov	r1, r3
 80008f8:	4804      	ldr	r0, [pc, #16]	@ (800090c <MX_GPIO_Init+0x5c>)
 80008fa:	f000 faf1 	bl	8000ee0 <HAL_GPIO_Init>
}
 80008fe:	bf00      	nop
 8000900:	3718      	adds	r7, #24
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40023800 	.word	0x40023800
 800090c:	40020000 	.word	0x40020000

08000910 <PlayNote1>:
        rx_write_index = (rx_write_index + 1) % BUFFER_SIZE;
        HAL_UART_Receive_IT(&huart2, &rx_data, 1);
    }
}

void PlayNote1(uint16_t frequency) {
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	80fb      	strh	r3, [r7, #6]
    uint16_t period = 1000000 / frequency - 1;
 800091a:	88fb      	ldrh	r3, [r7, #6]
 800091c:	4a0d      	ldr	r2, [pc, #52]	@ (8000954 <PlayNote1+0x44>)
 800091e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000922:	b29b      	uxth	r3, r3
 8000924:	3b01      	subs	r3, #1
 8000926:	81fb      	strh	r3, [r7, #14]
    __HAL_TIM_SET_AUTORELOAD(&htim2, period);
 8000928:	4b0b      	ldr	r3, [pc, #44]	@ (8000958 <PlayNote1+0x48>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	89fa      	ldrh	r2, [r7, #14]
 800092e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000930:	89fb      	ldrh	r3, [r7, #14]
 8000932:	4a09      	ldr	r2, [pc, #36]	@ (8000958 <PlayNote1+0x48>)
 8000934:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, period / 2);
 8000936:	89fb      	ldrh	r3, [r7, #14]
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	b29a      	uxth	r2, r3
 800093c:	4b06      	ldr	r3, [pc, #24]	@ (8000958 <PlayNote1+0x48>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000942:	2100      	movs	r1, #0
 8000944:	4804      	ldr	r0, [pc, #16]	@ (8000958 <PlayNote1+0x48>)
 8000946:	f001 fa11 	bl	8001d6c <HAL_TIM_PWM_Start>
}
 800094a:	bf00      	nop
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	000f4240 	.word	0x000f4240
 8000958:	20000028 	.word	0x20000028

0800095c <PlayNote2>:

void PlayNote2(uint16_t frequency) {
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	80fb      	strh	r3, [r7, #6]
    uint16_t period = 1000000 / frequency - 1;
 8000966:	88fb      	ldrh	r3, [r7, #6]
 8000968:	4a0d      	ldr	r2, [pc, #52]	@ (80009a0 <PlayNote2+0x44>)
 800096a:	fb92 f3f3 	sdiv	r3, r2, r3
 800096e:	b29b      	uxth	r3, r3
 8000970:	3b01      	subs	r3, #1
 8000972:	81fb      	strh	r3, [r7, #14]
    __HAL_TIM_SET_AUTORELOAD(&htim2, period);
 8000974:	4b0b      	ldr	r3, [pc, #44]	@ (80009a4 <PlayNote2+0x48>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	89fa      	ldrh	r2, [r7, #14]
 800097a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800097c:	89fb      	ldrh	r3, [r7, #14]
 800097e:	4a09      	ldr	r2, [pc, #36]	@ (80009a4 <PlayNote2+0x48>)
 8000980:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, period / 2);
 8000982:	89fb      	ldrh	r3, [r7, #14]
 8000984:	085b      	lsrs	r3, r3, #1
 8000986:	b29a      	uxth	r2, r3
 8000988:	4b06      	ldr	r3, [pc, #24]	@ (80009a4 <PlayNote2+0x48>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800098e:	2100      	movs	r1, #0
 8000990:	4804      	ldr	r0, [pc, #16]	@ (80009a4 <PlayNote2+0x48>)
 8000992:	f001 f9eb 	bl	8001d6c <HAL_TIM_PWM_Start>
}
 8000996:	bf00      	nop
 8000998:	3710      	adds	r7, #16
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	000f4240 	.word	0x000f4240
 80009a4:	20000028 	.word	0x20000028

080009a8 <StopNote>:

void StopNote() {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80009ac:	2100      	movs	r1, #0
 80009ae:	4802      	ldr	r0, [pc, #8]	@ (80009b8 <StopNote+0x10>)
 80009b0:	f001 faa4 	bl	8001efc <HAL_TIM_PWM_Stop>
}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	20000028 	.word	0x20000028

080009bc <Error_Handler>:

void Error_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c0:	b672      	cpsid	i
}
 80009c2:	bf00      	nop
    __disable_irq();
    while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <Error_Handler+0x8>

080009c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	607b      	str	r3, [r7, #4]
 80009d2:	4b10      	ldr	r3, [pc, #64]	@ (8000a14 <HAL_MspInit+0x4c>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009d6:	4a0f      	ldr	r2, [pc, #60]	@ (8000a14 <HAL_MspInit+0x4c>)
 80009d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80009de:	4b0d      	ldr	r3, [pc, #52]	@ (8000a14 <HAL_MspInit+0x4c>)
 80009e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	603b      	str	r3, [r7, #0]
 80009ee:	4b09      	ldr	r3, [pc, #36]	@ (8000a14 <HAL_MspInit+0x4c>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f2:	4a08      	ldr	r2, [pc, #32]	@ (8000a14 <HAL_MspInit+0x4c>)
 80009f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009fa:	4b06      	ldr	r3, [pc, #24]	@ (8000a14 <HAL_MspInit+0x4c>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a02:	603b      	str	r3, [r7, #0]
 8000a04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a06:	bf00      	nop
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	40023800 	.word	0x40023800

08000a18 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a28:	d10d      	bne.n	8000a46 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	4b09      	ldr	r3, [pc, #36]	@ (8000a54 <HAL_TIM_PWM_MspInit+0x3c>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a32:	4a08      	ldr	r2, [pc, #32]	@ (8000a54 <HAL_TIM_PWM_MspInit+0x3c>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a3a:	4b06      	ldr	r3, [pc, #24]	@ (8000a54 <HAL_TIM_PWM_MspInit+0x3c>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a46:	bf00      	nop
 8000a48:	3714      	adds	r7, #20
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	40023800 	.word	0x40023800

08000a58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b088      	sub	sp, #32
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	f107 030c 	add.w	r3, r7, #12
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a78:	d11d      	bne.n	8000ab6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60bb      	str	r3, [r7, #8]
 8000a7e:	4b10      	ldr	r3, [pc, #64]	@ (8000ac0 <HAL_TIM_MspPostInit+0x68>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a82:	4a0f      	ldr	r2, [pc, #60]	@ (8000ac0 <HAL_TIM_MspPostInit+0x68>)
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac0 <HAL_TIM_MspPostInit+0x68>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	60bb      	str	r3, [r7, #8]
 8000a94:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a96:	2301      	movs	r3, #1
 8000a98:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aaa:	f107 030c 	add.w	r3, r7, #12
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4804      	ldr	r0, [pc, #16]	@ (8000ac4 <HAL_TIM_MspPostInit+0x6c>)
 8000ab2:	f000 fa15 	bl	8000ee0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000ab6:	bf00      	nop
 8000ab8:	3720      	adds	r7, #32
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40020000 	.word	0x40020000

08000ac8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08a      	sub	sp, #40	@ 0x28
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a19      	ldr	r2, [pc, #100]	@ (8000b4c <HAL_UART_MspInit+0x84>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d12b      	bne.n	8000b42 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	613b      	str	r3, [r7, #16]
 8000aee:	4b18      	ldr	r3, [pc, #96]	@ (8000b50 <HAL_UART_MspInit+0x88>)
 8000af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af2:	4a17      	ldr	r2, [pc, #92]	@ (8000b50 <HAL_UART_MspInit+0x88>)
 8000af4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000af8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000afa:	4b15      	ldr	r3, [pc, #84]	@ (8000b50 <HAL_UART_MspInit+0x88>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	4b11      	ldr	r3, [pc, #68]	@ (8000b50 <HAL_UART_MspInit+0x88>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0e:	4a10      	ldr	r2, [pc, #64]	@ (8000b50 <HAL_UART_MspInit+0x88>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b16:	4b0e      	ldr	r3, [pc, #56]	@ (8000b50 <HAL_UART_MspInit+0x88>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b22:	230c      	movs	r3, #12
 8000b24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b26:	2302      	movs	r3, #2
 8000b28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b32:	2307      	movs	r3, #7
 8000b34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4805      	ldr	r0, [pc, #20]	@ (8000b54 <HAL_UART_MspInit+0x8c>)
 8000b3e:	f000 f9cf 	bl	8000ee0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b42:	bf00      	nop
 8000b44:	3728      	adds	r7, #40	@ 0x28
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40004400 	.word	0x40004400
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40020000 	.word	0x40020000

08000b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <NMI_Handler+0x4>

08000b60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <HardFault_Handler+0x4>

08000b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <MemManage_Handler+0x4>

08000b70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <BusFault_Handler+0x4>

08000b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <UsageFault_Handler+0x4>

08000b80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bae:	f000 f891 	bl	8000cd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bbc:	4b06      	ldr	r3, [pc, #24]	@ (8000bd8 <SystemInit+0x20>)
 8000bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bc2:	4a05      	ldr	r2, [pc, #20]	@ (8000bd8 <SystemInit+0x20>)
 8000bc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bdc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c14 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000be0:	f7ff ffea 	bl	8000bb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000be4:	480c      	ldr	r0, [pc, #48]	@ (8000c18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000be6:	490d      	ldr	r1, [pc, #52]	@ (8000c1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000be8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bec:	e002      	b.n	8000bf4 <LoopCopyDataInit>

08000bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf2:	3304      	adds	r3, #4

08000bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf8:	d3f9      	bcc.n	8000bee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8000c24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bfc:	4c0a      	ldr	r4, [pc, #40]	@ (8000c28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c00:	e001      	b.n	8000c06 <LoopFillZerobss>

08000c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c04:	3204      	adds	r2, #4

08000c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c08:	d3fb      	bcc.n	8000c02 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c0a:	f002 f8d3 	bl	8002db4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c0e:	f7ff fc71 	bl	80004f4 <main>
  bx  lr    
 8000c12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c1c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c20:	08002e3c 	.word	0x08002e3c
  ldr r2, =_sbss
 8000c24:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c28:	20000104 	.word	0x20000104

08000c2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c2c:	e7fe      	b.n	8000c2c <ADC_IRQHandler>
	...

08000c30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c34:	4b0e      	ldr	r3, [pc, #56]	@ (8000c70 <HAL_Init+0x40>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a0d      	ldr	r2, [pc, #52]	@ (8000c70 <HAL_Init+0x40>)
 8000c3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c40:	4b0b      	ldr	r3, [pc, #44]	@ (8000c70 <HAL_Init+0x40>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a0a      	ldr	r2, [pc, #40]	@ (8000c70 <HAL_Init+0x40>)
 8000c46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c4c:	4b08      	ldr	r3, [pc, #32]	@ (8000c70 <HAL_Init+0x40>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a07      	ldr	r2, [pc, #28]	@ (8000c70 <HAL_Init+0x40>)
 8000c52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c58:	2003      	movs	r0, #3
 8000c5a:	f000 f90d 	bl	8000e78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c5e:	200f      	movs	r0, #15
 8000c60:	f000 f808 	bl	8000c74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c64:	f7ff feb0 	bl	80009c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c68:	2300      	movs	r3, #0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40023c00 	.word	0x40023c00

08000c74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c7c:	4b12      	ldr	r3, [pc, #72]	@ (8000cc8 <HAL_InitTick+0x54>)
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	4b12      	ldr	r3, [pc, #72]	@ (8000ccc <HAL_InitTick+0x58>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	4619      	mov	r1, r3
 8000c86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c92:	4618      	mov	r0, r3
 8000c94:	f000 f917 	bl	8000ec6 <HAL_SYSTICK_Config>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e00e      	b.n	8000cc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2b0f      	cmp	r3, #15
 8000ca6:	d80a      	bhi.n	8000cbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	6879      	ldr	r1, [r7, #4]
 8000cac:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb0:	f000 f8ed 	bl	8000e8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cb4:	4a06      	ldr	r2, [pc, #24]	@ (8000cd0 <HAL_InitTick+0x5c>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	e000      	b.n	8000cc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000000 	.word	0x20000000
 8000ccc:	20000008 	.word	0x20000008
 8000cd0:	20000004 	.word	0x20000004

08000cd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	@ (8000cf4 <HAL_IncTick+0x20>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <HAL_IncTick+0x24>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	4a04      	ldr	r2, [pc, #16]	@ (8000cf8 <HAL_IncTick+0x24>)
 8000ce6:	6013      	str	r3, [r2, #0]
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	20000008 	.word	0x20000008
 8000cf8:	20000100 	.word	0x20000100

08000cfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000d00:	4b03      	ldr	r3, [pc, #12]	@ (8000d10 <HAL_GetTick+0x14>)
 8000d02:	681b      	ldr	r3, [r3, #0]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	20000100 	.word	0x20000100

08000d14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f003 0307 	and.w	r3, r3, #7
 8000d22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d24:	4b0c      	ldr	r3, [pc, #48]	@ (8000d58 <__NVIC_SetPriorityGrouping+0x44>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d2a:	68ba      	ldr	r2, [r7, #8]
 8000d2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d30:	4013      	ands	r3, r2
 8000d32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d46:	4a04      	ldr	r2, [pc, #16]	@ (8000d58 <__NVIC_SetPriorityGrouping+0x44>)
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	60d3      	str	r3, [r2, #12]
}
 8000d4c:	bf00      	nop
 8000d4e:	3714      	adds	r7, #20
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d60:	4b04      	ldr	r3, [pc, #16]	@ (8000d74 <__NVIC_GetPriorityGrouping+0x18>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	0a1b      	lsrs	r3, r3, #8
 8000d66:	f003 0307 	and.w	r3, r3, #7
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	6039      	str	r1, [r7, #0]
 8000d82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	db0a      	blt.n	8000da2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	490c      	ldr	r1, [pc, #48]	@ (8000dc4 <__NVIC_SetPriority+0x4c>)
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	0112      	lsls	r2, r2, #4
 8000d98:	b2d2      	uxtb	r2, r2
 8000d9a:	440b      	add	r3, r1
 8000d9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da0:	e00a      	b.n	8000db8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	b2da      	uxtb	r2, r3
 8000da6:	4908      	ldr	r1, [pc, #32]	@ (8000dc8 <__NVIC_SetPriority+0x50>)
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	f003 030f 	and.w	r3, r3, #15
 8000dae:	3b04      	subs	r3, #4
 8000db0:	0112      	lsls	r2, r2, #4
 8000db2:	b2d2      	uxtb	r2, r2
 8000db4:	440b      	add	r3, r1
 8000db6:	761a      	strb	r2, [r3, #24]
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000e100 	.word	0xe000e100
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b089      	sub	sp, #36	@ 0x24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	f003 0307 	and.w	r3, r3, #7
 8000dde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	f1c3 0307 	rsb	r3, r3, #7
 8000de6:	2b04      	cmp	r3, #4
 8000de8:	bf28      	it	cs
 8000dea:	2304      	movcs	r3, #4
 8000dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	3304      	adds	r3, #4
 8000df2:	2b06      	cmp	r3, #6
 8000df4:	d902      	bls.n	8000dfc <NVIC_EncodePriority+0x30>
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	3b03      	subs	r3, #3
 8000dfa:	e000      	b.n	8000dfe <NVIC_EncodePriority+0x32>
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e00:	f04f 32ff 	mov.w	r2, #4294967295
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	43da      	mvns	r2, r3
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	401a      	ands	r2, r3
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e14:	f04f 31ff 	mov.w	r1, #4294967295
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1e:	43d9      	mvns	r1, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e24:	4313      	orrs	r3, r2
         );
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3724      	adds	r7, #36	@ 0x24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
	...

08000e34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e44:	d301      	bcc.n	8000e4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e46:	2301      	movs	r3, #1
 8000e48:	e00f      	b.n	8000e6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e74 <SysTick_Config+0x40>)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3b01      	subs	r3, #1
 8000e50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e52:	210f      	movs	r1, #15
 8000e54:	f04f 30ff 	mov.w	r0, #4294967295
 8000e58:	f7ff ff8e 	bl	8000d78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e5c:	4b05      	ldr	r3, [pc, #20]	@ (8000e74 <SysTick_Config+0x40>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e62:	4b04      	ldr	r3, [pc, #16]	@ (8000e74 <SysTick_Config+0x40>)
 8000e64:	2207      	movs	r2, #7
 8000e66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	e000e010 	.word	0xe000e010

08000e78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f7ff ff47 	bl	8000d14 <__NVIC_SetPriorityGrouping>
}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b086      	sub	sp, #24
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	4603      	mov	r3, r0
 8000e96:	60b9      	str	r1, [r7, #8]
 8000e98:	607a      	str	r2, [r7, #4]
 8000e9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ea0:	f7ff ff5c 	bl	8000d5c <__NVIC_GetPriorityGrouping>
 8000ea4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	68b9      	ldr	r1, [r7, #8]
 8000eaa:	6978      	ldr	r0, [r7, #20]
 8000eac:	f7ff ff8e 	bl	8000dcc <NVIC_EncodePriority>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb6:	4611      	mov	r1, r2
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff ff5d 	bl	8000d78 <__NVIC_SetPriority>
}
 8000ebe:	bf00      	nop
 8000ec0:	3718      	adds	r7, #24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b082      	sub	sp, #8
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f7ff ffb0 	bl	8000e34 <SysTick_Config>
 8000ed4:	4603      	mov	r3, r0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b089      	sub	sp, #36	@ 0x24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]
 8000efa:	e165      	b.n	80011c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000efc:	2201      	movs	r2, #1
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	697a      	ldr	r2, [r7, #20]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	f040 8154 	bne.w	80011c2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f003 0303 	and.w	r3, r3, #3
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d005      	beq.n	8000f32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d130      	bne.n	8000f94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	2203      	movs	r2, #3
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43db      	mvns	r3, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4013      	ands	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	68da      	ldr	r2, [r3, #12]
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f68:	2201      	movs	r2, #1
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4013      	ands	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	091b      	lsrs	r3, r3, #4
 8000f7e:	f003 0201 	and.w	r2, r3, #1
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f003 0303 	and.w	r3, r3, #3
 8000f9c:	2b03      	cmp	r3, #3
 8000f9e:	d017      	beq.n	8000fd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	2203      	movs	r2, #3
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	689a      	ldr	r2, [r3, #8]
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f003 0303 	and.w	r3, r3, #3
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d123      	bne.n	8001024 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	08da      	lsrs	r2, r3, #3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3208      	adds	r2, #8
 8000fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	f003 0307 	and.w	r3, r3, #7
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	220f      	movs	r2, #15
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	691a      	ldr	r2, [r3, #16]
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4313      	orrs	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	08da      	lsrs	r2, r3, #3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	3208      	adds	r2, #8
 800101e:	69b9      	ldr	r1, [r7, #24]
 8001020:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	2203      	movs	r2, #3
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 0203 	and.w	r2, r3, #3
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001060:	2b00      	cmp	r3, #0
 8001062:	f000 80ae 	beq.w	80011c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	4b5d      	ldr	r3, [pc, #372]	@ (80011e0 <HAL_GPIO_Init+0x300>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800106e:	4a5c      	ldr	r2, [pc, #368]	@ (80011e0 <HAL_GPIO_Init+0x300>)
 8001070:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001074:	6453      	str	r3, [r2, #68]	@ 0x44
 8001076:	4b5a      	ldr	r3, [pc, #360]	@ (80011e0 <HAL_GPIO_Init+0x300>)
 8001078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800107a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001082:	4a58      	ldr	r2, [pc, #352]	@ (80011e4 <HAL_GPIO_Init+0x304>)
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	089b      	lsrs	r3, r3, #2
 8001088:	3302      	adds	r3, #2
 800108a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800108e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	f003 0303 	and.w	r3, r3, #3
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	220f      	movs	r2, #15
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4013      	ands	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a4f      	ldr	r2, [pc, #316]	@ (80011e8 <HAL_GPIO_Init+0x308>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d025      	beq.n	80010fa <HAL_GPIO_Init+0x21a>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a4e      	ldr	r2, [pc, #312]	@ (80011ec <HAL_GPIO_Init+0x30c>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d01f      	beq.n	80010f6 <HAL_GPIO_Init+0x216>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a4d      	ldr	r2, [pc, #308]	@ (80011f0 <HAL_GPIO_Init+0x310>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d019      	beq.n	80010f2 <HAL_GPIO_Init+0x212>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a4c      	ldr	r2, [pc, #304]	@ (80011f4 <HAL_GPIO_Init+0x314>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d013      	beq.n	80010ee <HAL_GPIO_Init+0x20e>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a4b      	ldr	r2, [pc, #300]	@ (80011f8 <HAL_GPIO_Init+0x318>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d00d      	beq.n	80010ea <HAL_GPIO_Init+0x20a>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a4a      	ldr	r2, [pc, #296]	@ (80011fc <HAL_GPIO_Init+0x31c>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d007      	beq.n	80010e6 <HAL_GPIO_Init+0x206>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a49      	ldr	r2, [pc, #292]	@ (8001200 <HAL_GPIO_Init+0x320>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d101      	bne.n	80010e2 <HAL_GPIO_Init+0x202>
 80010de:	2306      	movs	r3, #6
 80010e0:	e00c      	b.n	80010fc <HAL_GPIO_Init+0x21c>
 80010e2:	2307      	movs	r3, #7
 80010e4:	e00a      	b.n	80010fc <HAL_GPIO_Init+0x21c>
 80010e6:	2305      	movs	r3, #5
 80010e8:	e008      	b.n	80010fc <HAL_GPIO_Init+0x21c>
 80010ea:	2304      	movs	r3, #4
 80010ec:	e006      	b.n	80010fc <HAL_GPIO_Init+0x21c>
 80010ee:	2303      	movs	r3, #3
 80010f0:	e004      	b.n	80010fc <HAL_GPIO_Init+0x21c>
 80010f2:	2302      	movs	r3, #2
 80010f4:	e002      	b.n	80010fc <HAL_GPIO_Init+0x21c>
 80010f6:	2301      	movs	r3, #1
 80010f8:	e000      	b.n	80010fc <HAL_GPIO_Init+0x21c>
 80010fa:	2300      	movs	r3, #0
 80010fc:	69fa      	ldr	r2, [r7, #28]
 80010fe:	f002 0203 	and.w	r2, r2, #3
 8001102:	0092      	lsls	r2, r2, #2
 8001104:	4093      	lsls	r3, r2
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4313      	orrs	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800110c:	4935      	ldr	r1, [pc, #212]	@ (80011e4 <HAL_GPIO_Init+0x304>)
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	089b      	lsrs	r3, r3, #2
 8001112:	3302      	adds	r3, #2
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800111a:	4b3a      	ldr	r3, [pc, #232]	@ (8001204 <HAL_GPIO_Init+0x324>)
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	43db      	mvns	r3, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4013      	ands	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d003      	beq.n	800113e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800113e:	4a31      	ldr	r2, [pc, #196]	@ (8001204 <HAL_GPIO_Init+0x324>)
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001144:	4b2f      	ldr	r3, [pc, #188]	@ (8001204 <HAL_GPIO_Init+0x324>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	43db      	mvns	r3, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d003      	beq.n	8001168 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	4313      	orrs	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001168:	4a26      	ldr	r2, [pc, #152]	@ (8001204 <HAL_GPIO_Init+0x324>)
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800116e:	4b25      	ldr	r3, [pc, #148]	@ (8001204 <HAL_GPIO_Init+0x324>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	43db      	mvns	r3, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4013      	ands	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	4313      	orrs	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001192:	4a1c      	ldr	r2, [pc, #112]	@ (8001204 <HAL_GPIO_Init+0x324>)
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001198:	4b1a      	ldr	r3, [pc, #104]	@ (8001204 <HAL_GPIO_Init+0x324>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d003      	beq.n	80011bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011bc:	4a11      	ldr	r2, [pc, #68]	@ (8001204 <HAL_GPIO_Init+0x324>)
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	3301      	adds	r3, #1
 80011c6:	61fb      	str	r3, [r7, #28]
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	2b0f      	cmp	r3, #15
 80011cc:	f67f ae96 	bls.w	8000efc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011d0:	bf00      	nop
 80011d2:	bf00      	nop
 80011d4:	3724      	adds	r7, #36	@ 0x24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40013800 	.word	0x40013800
 80011e8:	40020000 	.word	0x40020000
 80011ec:	40020400 	.word	0x40020400
 80011f0:	40020800 	.word	0x40020800
 80011f4:	40020c00 	.word	0x40020c00
 80011f8:	40021000 	.word	0x40021000
 80011fc:	40021400 	.word	0x40021400
 8001200:	40021800 	.word	0x40021800
 8001204:	40013c00 	.word	0x40013c00

08001208 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d101      	bne.n	800121c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e0cc      	b.n	80013b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800121c:	4b68      	ldr	r3, [pc, #416]	@ (80013c0 <HAL_RCC_ClockConfig+0x1b8>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 030f 	and.w	r3, r3, #15
 8001224:	683a      	ldr	r2, [r7, #0]
 8001226:	429a      	cmp	r2, r3
 8001228:	d90c      	bls.n	8001244 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800122a:	4b65      	ldr	r3, [pc, #404]	@ (80013c0 <HAL_RCC_ClockConfig+0x1b8>)
 800122c:	683a      	ldr	r2, [r7, #0]
 800122e:	b2d2      	uxtb	r2, r2
 8001230:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001232:	4b63      	ldr	r3, [pc, #396]	@ (80013c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 030f 	and.w	r3, r3, #15
 800123a:	683a      	ldr	r2, [r7, #0]
 800123c:	429a      	cmp	r2, r3
 800123e:	d001      	beq.n	8001244 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	e0b8      	b.n	80013b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 0302 	and.w	r3, r3, #2
 800124c:	2b00      	cmp	r3, #0
 800124e:	d020      	beq.n	8001292 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 0304 	and.w	r3, r3, #4
 8001258:	2b00      	cmp	r3, #0
 800125a:	d005      	beq.n	8001268 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800125c:	4b59      	ldr	r3, [pc, #356]	@ (80013c4 <HAL_RCC_ClockConfig+0x1bc>)
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	4a58      	ldr	r2, [pc, #352]	@ (80013c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001262:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001266:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0308 	and.w	r3, r3, #8
 8001270:	2b00      	cmp	r3, #0
 8001272:	d005      	beq.n	8001280 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001274:	4b53      	ldr	r3, [pc, #332]	@ (80013c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	4a52      	ldr	r2, [pc, #328]	@ (80013c4 <HAL_RCC_ClockConfig+0x1bc>)
 800127a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800127e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001280:	4b50      	ldr	r3, [pc, #320]	@ (80013c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	494d      	ldr	r1, [pc, #308]	@ (80013c4 <HAL_RCC_ClockConfig+0x1bc>)
 800128e:	4313      	orrs	r3, r2
 8001290:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	2b00      	cmp	r3, #0
 800129c:	d044      	beq.n	8001328 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d107      	bne.n	80012b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012a6:	4b47      	ldr	r3, [pc, #284]	@ (80013c4 <HAL_RCC_ClockConfig+0x1bc>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d119      	bne.n	80012e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e07f      	b.n	80013b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d003      	beq.n	80012c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012c2:	2b03      	cmp	r3, #3
 80012c4:	d107      	bne.n	80012d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012c6:	4b3f      	ldr	r3, [pc, #252]	@ (80013c4 <HAL_RCC_ClockConfig+0x1bc>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d109      	bne.n	80012e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e06f      	b.n	80013b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d6:	4b3b      	ldr	r3, [pc, #236]	@ (80013c4 <HAL_RCC_ClockConfig+0x1bc>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d101      	bne.n	80012e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e067      	b.n	80013b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012e6:	4b37      	ldr	r3, [pc, #220]	@ (80013c4 <HAL_RCC_ClockConfig+0x1bc>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f023 0203 	bic.w	r2, r3, #3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	4934      	ldr	r1, [pc, #208]	@ (80013c4 <HAL_RCC_ClockConfig+0x1bc>)
 80012f4:	4313      	orrs	r3, r2
 80012f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012f8:	f7ff fd00 	bl	8000cfc <HAL_GetTick>
 80012fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012fe:	e00a      	b.n	8001316 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001300:	f7ff fcfc 	bl	8000cfc <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800130e:	4293      	cmp	r3, r2
 8001310:	d901      	bls.n	8001316 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e04f      	b.n	80013b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001316:	4b2b      	ldr	r3, [pc, #172]	@ (80013c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	f003 020c 	and.w	r2, r3, #12
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	429a      	cmp	r2, r3
 8001326:	d1eb      	bne.n	8001300 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001328:	4b25      	ldr	r3, [pc, #148]	@ (80013c0 <HAL_RCC_ClockConfig+0x1b8>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 030f 	and.w	r3, r3, #15
 8001330:	683a      	ldr	r2, [r7, #0]
 8001332:	429a      	cmp	r2, r3
 8001334:	d20c      	bcs.n	8001350 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001336:	4b22      	ldr	r3, [pc, #136]	@ (80013c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001338:	683a      	ldr	r2, [r7, #0]
 800133a:	b2d2      	uxtb	r2, r2
 800133c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800133e:	4b20      	ldr	r3, [pc, #128]	@ (80013c0 <HAL_RCC_ClockConfig+0x1b8>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 030f 	and.w	r3, r3, #15
 8001346:	683a      	ldr	r2, [r7, #0]
 8001348:	429a      	cmp	r2, r3
 800134a:	d001      	beq.n	8001350 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e032      	b.n	80013b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 0304 	and.w	r3, r3, #4
 8001358:	2b00      	cmp	r3, #0
 800135a:	d008      	beq.n	800136e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800135c:	4b19      	ldr	r3, [pc, #100]	@ (80013c4 <HAL_RCC_ClockConfig+0x1bc>)
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	4916      	ldr	r1, [pc, #88]	@ (80013c4 <HAL_RCC_ClockConfig+0x1bc>)
 800136a:	4313      	orrs	r3, r2
 800136c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0308 	and.w	r3, r3, #8
 8001376:	2b00      	cmp	r3, #0
 8001378:	d009      	beq.n	800138e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800137a:	4b12      	ldr	r3, [pc, #72]	@ (80013c4 <HAL_RCC_ClockConfig+0x1bc>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	691b      	ldr	r3, [r3, #16]
 8001386:	00db      	lsls	r3, r3, #3
 8001388:	490e      	ldr	r1, [pc, #56]	@ (80013c4 <HAL_RCC_ClockConfig+0x1bc>)
 800138a:	4313      	orrs	r3, r2
 800138c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800138e:	f000 f855 	bl	800143c <HAL_RCC_GetSysClockFreq>
 8001392:	4602      	mov	r2, r0
 8001394:	4b0b      	ldr	r3, [pc, #44]	@ (80013c4 <HAL_RCC_ClockConfig+0x1bc>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	091b      	lsrs	r3, r3, #4
 800139a:	f003 030f 	and.w	r3, r3, #15
 800139e:	490a      	ldr	r1, [pc, #40]	@ (80013c8 <HAL_RCC_ClockConfig+0x1c0>)
 80013a0:	5ccb      	ldrb	r3, [r1, r3]
 80013a2:	fa22 f303 	lsr.w	r3, r2, r3
 80013a6:	4a09      	ldr	r2, [pc, #36]	@ (80013cc <HAL_RCC_ClockConfig+0x1c4>)
 80013a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80013aa:	4b09      	ldr	r3, [pc, #36]	@ (80013d0 <HAL_RCC_ClockConfig+0x1c8>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff fc60 	bl	8000c74 <HAL_InitTick>

  return HAL_OK;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40023c00 	.word	0x40023c00
 80013c4:	40023800 	.word	0x40023800
 80013c8:	08002e14 	.word	0x08002e14
 80013cc:	20000000 	.word	0x20000000
 80013d0:	20000004 	.word	0x20000004

080013d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013d8:	4b03      	ldr	r3, [pc, #12]	@ (80013e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80013da:	681b      	ldr	r3, [r3, #0]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20000000 	.word	0x20000000

080013ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80013f0:	f7ff fff0 	bl	80013d4 <HAL_RCC_GetHCLKFreq>
 80013f4:	4602      	mov	r2, r0
 80013f6:	4b05      	ldr	r3, [pc, #20]	@ (800140c <HAL_RCC_GetPCLK1Freq+0x20>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	0a9b      	lsrs	r3, r3, #10
 80013fc:	f003 0307 	and.w	r3, r3, #7
 8001400:	4903      	ldr	r1, [pc, #12]	@ (8001410 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001402:	5ccb      	ldrb	r3, [r1, r3]
 8001404:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001408:	4618      	mov	r0, r3
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40023800 	.word	0x40023800
 8001410:	08002e24 	.word	0x08002e24

08001414 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001418:	f7ff ffdc 	bl	80013d4 <HAL_RCC_GetHCLKFreq>
 800141c:	4602      	mov	r2, r0
 800141e:	4b05      	ldr	r3, [pc, #20]	@ (8001434 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	0b5b      	lsrs	r3, r3, #13
 8001424:	f003 0307 	and.w	r3, r3, #7
 8001428:	4903      	ldr	r1, [pc, #12]	@ (8001438 <HAL_RCC_GetPCLK2Freq+0x24>)
 800142a:	5ccb      	ldrb	r3, [r1, r3]
 800142c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001430:	4618      	mov	r0, r3
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40023800 	.word	0x40023800
 8001438:	08002e24 	.word	0x08002e24

0800143c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800143c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001440:	b0a6      	sub	sp, #152	@ 0x98
 8001442:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001444:	2300      	movs	r3, #0
 8001446:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800144a:	2300      	movs	r3, #0
 800144c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8001450:	2300      	movs	r3, #0
 8001452:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8001456:	2300      	movs	r3, #0
 8001458:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 800145c:	2300      	movs	r3, #0
 800145e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001462:	4bc8      	ldr	r3, [pc, #800]	@ (8001784 <HAL_RCC_GetSysClockFreq+0x348>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	f003 030c 	and.w	r3, r3, #12
 800146a:	2b0c      	cmp	r3, #12
 800146c:	f200 817e 	bhi.w	800176c <HAL_RCC_GetSysClockFreq+0x330>
 8001470:	a201      	add	r2, pc, #4	@ (adr r2, 8001478 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001476:	bf00      	nop
 8001478:	080014ad 	.word	0x080014ad
 800147c:	0800176d 	.word	0x0800176d
 8001480:	0800176d 	.word	0x0800176d
 8001484:	0800176d 	.word	0x0800176d
 8001488:	080014b5 	.word	0x080014b5
 800148c:	0800176d 	.word	0x0800176d
 8001490:	0800176d 	.word	0x0800176d
 8001494:	0800176d 	.word	0x0800176d
 8001498:	080014bd 	.word	0x080014bd
 800149c:	0800176d 	.word	0x0800176d
 80014a0:	0800176d 	.word	0x0800176d
 80014a4:	0800176d 	.word	0x0800176d
 80014a8:	08001627 	.word	0x08001627
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014ac:	4bb6      	ldr	r3, [pc, #728]	@ (8001788 <HAL_RCC_GetSysClockFreq+0x34c>)
 80014ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 80014b2:	e15f      	b.n	8001774 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80014b4:	4bb5      	ldr	r3, [pc, #724]	@ (800178c <HAL_RCC_GetSysClockFreq+0x350>)
 80014b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80014ba:	e15b      	b.n	8001774 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014bc:	4bb1      	ldr	r3, [pc, #708]	@ (8001784 <HAL_RCC_GetSysClockFreq+0x348>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80014c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014c8:	4bae      	ldr	r3, [pc, #696]	@ (8001784 <HAL_RCC_GetSysClockFreq+0x348>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d031      	beq.n	8001538 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014d4:	4bab      	ldr	r3, [pc, #684]	@ (8001784 <HAL_RCC_GetSysClockFreq+0x348>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	099b      	lsrs	r3, r3, #6
 80014da:	2200      	movs	r2, #0
 80014dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80014de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80014e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80014e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014e6:	663b      	str	r3, [r7, #96]	@ 0x60
 80014e8:	2300      	movs	r3, #0
 80014ea:	667b      	str	r3, [r7, #100]	@ 0x64
 80014ec:	4ba7      	ldr	r3, [pc, #668]	@ (800178c <HAL_RCC_GetSysClockFreq+0x350>)
 80014ee:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80014f2:	462a      	mov	r2, r5
 80014f4:	fb03 f202 	mul.w	r2, r3, r2
 80014f8:	2300      	movs	r3, #0
 80014fa:	4621      	mov	r1, r4
 80014fc:	fb01 f303 	mul.w	r3, r1, r3
 8001500:	4413      	add	r3, r2
 8001502:	4aa2      	ldr	r2, [pc, #648]	@ (800178c <HAL_RCC_GetSysClockFreq+0x350>)
 8001504:	4621      	mov	r1, r4
 8001506:	fba1 1202 	umull	r1, r2, r1, r2
 800150a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800150c:	460a      	mov	r2, r1
 800150e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001510:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001512:	4413      	add	r3, r2
 8001514:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001516:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800151a:	2200      	movs	r2, #0
 800151c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800151e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001520:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001524:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001528:	f7fe fe6c 	bl	8000204 <__aeabi_uldivmod>
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	4613      	mov	r3, r2
 8001532:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001536:	e064      	b.n	8001602 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001538:	4b92      	ldr	r3, [pc, #584]	@ (8001784 <HAL_RCC_GetSysClockFreq+0x348>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	099b      	lsrs	r3, r3, #6
 800153e:	2200      	movs	r2, #0
 8001540:	653b      	str	r3, [r7, #80]	@ 0x50
 8001542:	657a      	str	r2, [r7, #84]	@ 0x54
 8001544:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800154a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800154c:	2300      	movs	r3, #0
 800154e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001550:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001554:	4622      	mov	r2, r4
 8001556:	462b      	mov	r3, r5
 8001558:	f04f 0000 	mov.w	r0, #0
 800155c:	f04f 0100 	mov.w	r1, #0
 8001560:	0159      	lsls	r1, r3, #5
 8001562:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001566:	0150      	lsls	r0, r2, #5
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	4621      	mov	r1, r4
 800156e:	1a51      	subs	r1, r2, r1
 8001570:	6139      	str	r1, [r7, #16]
 8001572:	4629      	mov	r1, r5
 8001574:	eb63 0301 	sbc.w	r3, r3, r1
 8001578:	617b      	str	r3, [r7, #20]
 800157a:	f04f 0200 	mov.w	r2, #0
 800157e:	f04f 0300 	mov.w	r3, #0
 8001582:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001586:	4659      	mov	r1, fp
 8001588:	018b      	lsls	r3, r1, #6
 800158a:	4651      	mov	r1, sl
 800158c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001590:	4651      	mov	r1, sl
 8001592:	018a      	lsls	r2, r1, #6
 8001594:	4651      	mov	r1, sl
 8001596:	ebb2 0801 	subs.w	r8, r2, r1
 800159a:	4659      	mov	r1, fp
 800159c:	eb63 0901 	sbc.w	r9, r3, r1
 80015a0:	f04f 0200 	mov.w	r2, #0
 80015a4:	f04f 0300 	mov.w	r3, #0
 80015a8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80015ac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80015b0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80015b4:	4690      	mov	r8, r2
 80015b6:	4699      	mov	r9, r3
 80015b8:	4623      	mov	r3, r4
 80015ba:	eb18 0303 	adds.w	r3, r8, r3
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	462b      	mov	r3, r5
 80015c2:	eb49 0303 	adc.w	r3, r9, r3
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	f04f 0200 	mov.w	r2, #0
 80015cc:	f04f 0300 	mov.w	r3, #0
 80015d0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80015d4:	4629      	mov	r1, r5
 80015d6:	028b      	lsls	r3, r1, #10
 80015d8:	4621      	mov	r1, r4
 80015da:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80015de:	4621      	mov	r1, r4
 80015e0:	028a      	lsls	r2, r1, #10
 80015e2:	4610      	mov	r0, r2
 80015e4:	4619      	mov	r1, r3
 80015e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80015ea:	2200      	movs	r2, #0
 80015ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80015ee:	647a      	str	r2, [r7, #68]	@ 0x44
 80015f0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80015f4:	f7fe fe06 	bl	8000204 <__aeabi_uldivmod>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	4613      	mov	r3, r2
 80015fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001602:	4b60      	ldr	r3, [pc, #384]	@ (8001784 <HAL_RCC_GetSysClockFreq+0x348>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	0c1b      	lsrs	r3, r3, #16
 8001608:	f003 0303 	and.w	r3, r3, #3
 800160c:	3301      	adds	r3, #1
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 8001614:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001618:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800161c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001620:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001624:	e0a6      	b.n	8001774 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001626:	4b57      	ldr	r3, [pc, #348]	@ (8001784 <HAL_RCC_GetSysClockFreq+0x348>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800162e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001632:	4b54      	ldr	r3, [pc, #336]	@ (8001784 <HAL_RCC_GetSysClockFreq+0x348>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d02a      	beq.n	8001694 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800163e:	4b51      	ldr	r3, [pc, #324]	@ (8001784 <HAL_RCC_GetSysClockFreq+0x348>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	099b      	lsrs	r3, r3, #6
 8001644:	2200      	movs	r2, #0
 8001646:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001648:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800164a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800164c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001650:	2100      	movs	r1, #0
 8001652:	4b4e      	ldr	r3, [pc, #312]	@ (800178c <HAL_RCC_GetSysClockFreq+0x350>)
 8001654:	fb03 f201 	mul.w	r2, r3, r1
 8001658:	2300      	movs	r3, #0
 800165a:	fb00 f303 	mul.w	r3, r0, r3
 800165e:	4413      	add	r3, r2
 8001660:	4a4a      	ldr	r2, [pc, #296]	@ (800178c <HAL_RCC_GetSysClockFreq+0x350>)
 8001662:	fba0 1202 	umull	r1, r2, r0, r2
 8001666:	677a      	str	r2, [r7, #116]	@ 0x74
 8001668:	460a      	mov	r2, r1
 800166a:	673a      	str	r2, [r7, #112]	@ 0x70
 800166c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800166e:	4413      	add	r3, r2
 8001670:	677b      	str	r3, [r7, #116]	@ 0x74
 8001672:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001676:	2200      	movs	r2, #0
 8001678:	633b      	str	r3, [r7, #48]	@ 0x30
 800167a:	637a      	str	r2, [r7, #52]	@ 0x34
 800167c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001680:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001684:	f7fe fdbe 	bl	8000204 <__aeabi_uldivmod>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4613      	mov	r3, r2
 800168e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001692:	e05b      	b.n	800174c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001694:	4b3b      	ldr	r3, [pc, #236]	@ (8001784 <HAL_RCC_GetSysClockFreq+0x348>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	099b      	lsrs	r3, r3, #6
 800169a:	2200      	movs	r2, #0
 800169c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800169e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80016a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016a6:	623b      	str	r3, [r7, #32]
 80016a8:	2300      	movs	r3, #0
 80016aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80016ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80016b0:	4642      	mov	r2, r8
 80016b2:	464b      	mov	r3, r9
 80016b4:	f04f 0000 	mov.w	r0, #0
 80016b8:	f04f 0100 	mov.w	r1, #0
 80016bc:	0159      	lsls	r1, r3, #5
 80016be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016c2:	0150      	lsls	r0, r2, #5
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	4641      	mov	r1, r8
 80016ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80016ce:	4649      	mov	r1, r9
 80016d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80016d4:	f04f 0200 	mov.w	r2, #0
 80016d8:	f04f 0300 	mov.w	r3, #0
 80016dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80016e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80016e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80016e8:	ebb2 040a 	subs.w	r4, r2, sl
 80016ec:	eb63 050b 	sbc.w	r5, r3, fp
 80016f0:	f04f 0200 	mov.w	r2, #0
 80016f4:	f04f 0300 	mov.w	r3, #0
 80016f8:	00eb      	lsls	r3, r5, #3
 80016fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80016fe:	00e2      	lsls	r2, r4, #3
 8001700:	4614      	mov	r4, r2
 8001702:	461d      	mov	r5, r3
 8001704:	4643      	mov	r3, r8
 8001706:	18e3      	adds	r3, r4, r3
 8001708:	603b      	str	r3, [r7, #0]
 800170a:	464b      	mov	r3, r9
 800170c:	eb45 0303 	adc.w	r3, r5, r3
 8001710:	607b      	str	r3, [r7, #4]
 8001712:	f04f 0200 	mov.w	r2, #0
 8001716:	f04f 0300 	mov.w	r3, #0
 800171a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800171e:	4629      	mov	r1, r5
 8001720:	028b      	lsls	r3, r1, #10
 8001722:	4621      	mov	r1, r4
 8001724:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001728:	4621      	mov	r1, r4
 800172a:	028a      	lsls	r2, r1, #10
 800172c:	4610      	mov	r0, r2
 800172e:	4619      	mov	r1, r3
 8001730:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001734:	2200      	movs	r2, #0
 8001736:	61bb      	str	r3, [r7, #24]
 8001738:	61fa      	str	r2, [r7, #28]
 800173a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800173e:	f7fe fd61 	bl	8000204 <__aeabi_uldivmod>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4613      	mov	r3, r2
 8001748:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800174c:	4b0d      	ldr	r3, [pc, #52]	@ (8001784 <HAL_RCC_GetSysClockFreq+0x348>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	0f1b      	lsrs	r3, r3, #28
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 800175a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800175e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001762:	fbb2 f3f3 	udiv	r3, r2, r3
 8001766:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800176a:	e003      	b.n	8001774 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800176c:	4b06      	ldr	r3, [pc, #24]	@ (8001788 <HAL_RCC_GetSysClockFreq+0x34c>)
 800176e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001772:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001774:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8001778:	4618      	mov	r0, r3
 800177a:	3798      	adds	r7, #152	@ 0x98
 800177c:	46bd      	mov	sp, r7
 800177e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001782:	bf00      	nop
 8001784:	40023800 	.word	0x40023800
 8001788:	00f42400 	.word	0x00f42400
 800178c:	017d7840 	.word	0x017d7840

08001790 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e28d      	b.n	8001cbe <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f000 8083 	beq.w	80018b6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017b0:	4b94      	ldr	r3, [pc, #592]	@ (8001a04 <HAL_RCC_OscConfig+0x274>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f003 030c 	and.w	r3, r3, #12
 80017b8:	2b04      	cmp	r3, #4
 80017ba:	d019      	beq.n	80017f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017bc:	4b91      	ldr	r3, [pc, #580]	@ (8001a04 <HAL_RCC_OscConfig+0x274>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017c4:	2b08      	cmp	r3, #8
 80017c6:	d106      	bne.n	80017d6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017c8:	4b8e      	ldr	r3, [pc, #568]	@ (8001a04 <HAL_RCC_OscConfig+0x274>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80017d4:	d00c      	beq.n	80017f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017d6:	4b8b      	ldr	r3, [pc, #556]	@ (8001a04 <HAL_RCC_OscConfig+0x274>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017de:	2b0c      	cmp	r3, #12
 80017e0:	d112      	bne.n	8001808 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017e2:	4b88      	ldr	r3, [pc, #544]	@ (8001a04 <HAL_RCC_OscConfig+0x274>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80017ee:	d10b      	bne.n	8001808 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017f0:	4b84      	ldr	r3, [pc, #528]	@ (8001a04 <HAL_RCC_OscConfig+0x274>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d05b      	beq.n	80018b4 <HAL_RCC_OscConfig+0x124>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d157      	bne.n	80018b4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e25a      	b.n	8001cbe <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001810:	d106      	bne.n	8001820 <HAL_RCC_OscConfig+0x90>
 8001812:	4b7c      	ldr	r3, [pc, #496]	@ (8001a04 <HAL_RCC_OscConfig+0x274>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a7b      	ldr	r2, [pc, #492]	@ (8001a04 <HAL_RCC_OscConfig+0x274>)
 8001818:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	e01d      	b.n	800185c <HAL_RCC_OscConfig+0xcc>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001828:	d10c      	bne.n	8001844 <HAL_RCC_OscConfig+0xb4>
 800182a:	4b76      	ldr	r3, [pc, #472]	@ (8001a04 <HAL_RCC_OscConfig+0x274>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a75      	ldr	r2, [pc, #468]	@ (8001a04 <HAL_RCC_OscConfig+0x274>)
 8001830:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001834:	6013      	str	r3, [r2, #0]
 8001836:	4b73      	ldr	r3, [pc, #460]	@ (8001a04 <HAL_RCC_OscConfig+0x274>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a72      	ldr	r2, [pc, #456]	@ (8001a04 <HAL_RCC_OscConfig+0x274>)
 800183c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001840:	6013      	str	r3, [r2, #0]
 8001842:	e00b      	b.n	800185c <HAL_RCC_OscConfig+0xcc>
 8001844:	4b6f      	ldr	r3, [pc, #444]	@ (8001a04 <HAL_RCC_OscConfig+0x274>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a6e      	ldr	r2, [pc, #440]	@ (8001a04 <HAL_RCC_OscConfig+0x274>)
 800184a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800184e:	6013      	str	r3, [r2, #0]
 8001850:	4b6c      	ldr	r3, [pc, #432]	@ (8001a04 <HAL_RCC_OscConfig+0x274>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a6b      	ldr	r2, [pc, #428]	@ (8001a04 <HAL_RCC_OscConfig+0x274>)
 8001856:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800185a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d013      	beq.n	800188c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001864:	f7ff fa4a 	bl	8000cfc <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800186c:	f7ff fa46 	bl	8000cfc <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b64      	cmp	r3, #100	@ 0x64
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e21f      	b.n	8001cbe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800187e:	4b61      	ldr	r3, [pc, #388]	@ (8001a04 <HAL_RCC_OscConfig+0x274>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d0f0      	beq.n	800186c <HAL_RCC_OscConfig+0xdc>
 800188a:	e014      	b.n	80018b6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188c:	f7ff fa36 	bl	8000cfc <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001894:	f7ff fa32 	bl	8000cfc <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b64      	cmp	r3, #100	@ 0x64
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e20b      	b.n	8001cbe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018a6:	4b57      	ldr	r3, [pc, #348]	@ (8001a04 <HAL_RCC_OscConfig+0x274>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f0      	bne.n	8001894 <HAL_RCC_OscConfig+0x104>
 80018b2:	e000      	b.n	80018b6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d06f      	beq.n	80019a2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80018c2:	4b50      	ldr	r3, [pc, #320]	@ (8001a04 <HAL_RCC_OscConfig+0x274>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f003 030c 	and.w	r3, r3, #12
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d017      	beq.n	80018fe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80018ce:	4b4d      	ldr	r3, [pc, #308]	@ (8001a04 <HAL_RCC_OscConfig+0x274>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80018d6:	2b08      	cmp	r3, #8
 80018d8:	d105      	bne.n	80018e6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80018da:	4b4a      	ldr	r3, [pc, #296]	@ (8001a04 <HAL_RCC_OscConfig+0x274>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d00b      	beq.n	80018fe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018e6:	4b47      	ldr	r3, [pc, #284]	@ (8001a04 <HAL_RCC_OscConfig+0x274>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80018ee:	2b0c      	cmp	r3, #12
 80018f0:	d11c      	bne.n	800192c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018f2:	4b44      	ldr	r3, [pc, #272]	@ (8001a04 <HAL_RCC_OscConfig+0x274>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d116      	bne.n	800192c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018fe:	4b41      	ldr	r3, [pc, #260]	@ (8001a04 <HAL_RCC_OscConfig+0x274>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d005      	beq.n	8001916 <HAL_RCC_OscConfig+0x186>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d001      	beq.n	8001916 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e1d3      	b.n	8001cbe <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001916:	4b3b      	ldr	r3, [pc, #236]	@ (8001a04 <HAL_RCC_OscConfig+0x274>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	4937      	ldr	r1, [pc, #220]	@ (8001a04 <HAL_RCC_OscConfig+0x274>)
 8001926:	4313      	orrs	r3, r2
 8001928:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800192a:	e03a      	b.n	80019a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d020      	beq.n	8001976 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001934:	4b34      	ldr	r3, [pc, #208]	@ (8001a08 <HAL_RCC_OscConfig+0x278>)
 8001936:	2201      	movs	r2, #1
 8001938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193a:	f7ff f9df 	bl	8000cfc <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001940:	e008      	b.n	8001954 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001942:	f7ff f9db 	bl	8000cfc <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e1b4      	b.n	8001cbe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001954:	4b2b      	ldr	r3, [pc, #172]	@ (8001a04 <HAL_RCC_OscConfig+0x274>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d0f0      	beq.n	8001942 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001960:	4b28      	ldr	r3, [pc, #160]	@ (8001a04 <HAL_RCC_OscConfig+0x274>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	691b      	ldr	r3, [r3, #16]
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	4925      	ldr	r1, [pc, #148]	@ (8001a04 <HAL_RCC_OscConfig+0x274>)
 8001970:	4313      	orrs	r3, r2
 8001972:	600b      	str	r3, [r1, #0]
 8001974:	e015      	b.n	80019a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001976:	4b24      	ldr	r3, [pc, #144]	@ (8001a08 <HAL_RCC_OscConfig+0x278>)
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800197c:	f7ff f9be 	bl	8000cfc <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001984:	f7ff f9ba 	bl	8000cfc <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e193      	b.n	8001cbe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001996:	4b1b      	ldr	r3, [pc, #108]	@ (8001a04 <HAL_RCC_OscConfig+0x274>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1f0      	bne.n	8001984 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0308 	and.w	r3, r3, #8
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d036      	beq.n	8001a1c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	695b      	ldr	r3, [r3, #20]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d016      	beq.n	80019e4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019b6:	4b15      	ldr	r3, [pc, #84]	@ (8001a0c <HAL_RCC_OscConfig+0x27c>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019bc:	f7ff f99e 	bl	8000cfc <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019c4:	f7ff f99a 	bl	8000cfc <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e173      	b.n	8001cbe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001a04 <HAL_RCC_OscConfig+0x274>)
 80019d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d0f0      	beq.n	80019c4 <HAL_RCC_OscConfig+0x234>
 80019e2:	e01b      	b.n	8001a1c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019e4:	4b09      	ldr	r3, [pc, #36]	@ (8001a0c <HAL_RCC_OscConfig+0x27c>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ea:	f7ff f987 	bl	8000cfc <HAL_GetTick>
 80019ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019f0:	e00e      	b.n	8001a10 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019f2:	f7ff f983 	bl	8000cfc <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d907      	bls.n	8001a10 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e15c      	b.n	8001cbe <HAL_RCC_OscConfig+0x52e>
 8001a04:	40023800 	.word	0x40023800
 8001a08:	42470000 	.word	0x42470000
 8001a0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a10:	4b8a      	ldr	r3, [pc, #552]	@ (8001c3c <HAL_RCC_OscConfig+0x4ac>)
 8001a12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d1ea      	bne.n	80019f2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0304 	and.w	r3, r3, #4
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f000 8097 	beq.w	8001b58 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a2e:	4b83      	ldr	r3, [pc, #524]	@ (8001c3c <HAL_RCC_OscConfig+0x4ac>)
 8001a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d10f      	bne.n	8001a5a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	4b7f      	ldr	r3, [pc, #508]	@ (8001c3c <HAL_RCC_OscConfig+0x4ac>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a42:	4a7e      	ldr	r2, [pc, #504]	@ (8001c3c <HAL_RCC_OscConfig+0x4ac>)
 8001a44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a48:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a4a:	4b7c      	ldr	r3, [pc, #496]	@ (8001c3c <HAL_RCC_OscConfig+0x4ac>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a52:	60bb      	str	r3, [r7, #8]
 8001a54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a56:	2301      	movs	r3, #1
 8001a58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a5a:	4b79      	ldr	r3, [pc, #484]	@ (8001c40 <HAL_RCC_OscConfig+0x4b0>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d118      	bne.n	8001a98 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a66:	4b76      	ldr	r3, [pc, #472]	@ (8001c40 <HAL_RCC_OscConfig+0x4b0>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a75      	ldr	r2, [pc, #468]	@ (8001c40 <HAL_RCC_OscConfig+0x4b0>)
 8001a6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a72:	f7ff f943 	bl	8000cfc <HAL_GetTick>
 8001a76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a78:	e008      	b.n	8001a8c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a7a:	f7ff f93f 	bl	8000cfc <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e118      	b.n	8001cbe <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a8c:	4b6c      	ldr	r3, [pc, #432]	@ (8001c40 <HAL_RCC_OscConfig+0x4b0>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d0f0      	beq.n	8001a7a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d106      	bne.n	8001aae <HAL_RCC_OscConfig+0x31e>
 8001aa0:	4b66      	ldr	r3, [pc, #408]	@ (8001c3c <HAL_RCC_OscConfig+0x4ac>)
 8001aa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aa4:	4a65      	ldr	r2, [pc, #404]	@ (8001c3c <HAL_RCC_OscConfig+0x4ac>)
 8001aa6:	f043 0301 	orr.w	r3, r3, #1
 8001aaa:	6713      	str	r3, [r2, #112]	@ 0x70
 8001aac:	e01c      	b.n	8001ae8 <HAL_RCC_OscConfig+0x358>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	2b05      	cmp	r3, #5
 8001ab4:	d10c      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x340>
 8001ab6:	4b61      	ldr	r3, [pc, #388]	@ (8001c3c <HAL_RCC_OscConfig+0x4ac>)
 8001ab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aba:	4a60      	ldr	r2, [pc, #384]	@ (8001c3c <HAL_RCC_OscConfig+0x4ac>)
 8001abc:	f043 0304 	orr.w	r3, r3, #4
 8001ac0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ac2:	4b5e      	ldr	r3, [pc, #376]	@ (8001c3c <HAL_RCC_OscConfig+0x4ac>)
 8001ac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ac6:	4a5d      	ldr	r2, [pc, #372]	@ (8001c3c <HAL_RCC_OscConfig+0x4ac>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ace:	e00b      	b.n	8001ae8 <HAL_RCC_OscConfig+0x358>
 8001ad0:	4b5a      	ldr	r3, [pc, #360]	@ (8001c3c <HAL_RCC_OscConfig+0x4ac>)
 8001ad2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ad4:	4a59      	ldr	r2, [pc, #356]	@ (8001c3c <HAL_RCC_OscConfig+0x4ac>)
 8001ad6:	f023 0301 	bic.w	r3, r3, #1
 8001ada:	6713      	str	r3, [r2, #112]	@ 0x70
 8001adc:	4b57      	ldr	r3, [pc, #348]	@ (8001c3c <HAL_RCC_OscConfig+0x4ac>)
 8001ade:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ae0:	4a56      	ldr	r2, [pc, #344]	@ (8001c3c <HAL_RCC_OscConfig+0x4ac>)
 8001ae2:	f023 0304 	bic.w	r3, r3, #4
 8001ae6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d015      	beq.n	8001b1c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af0:	f7ff f904 	bl	8000cfc <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001af6:	e00a      	b.n	8001b0e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001af8:	f7ff f900 	bl	8000cfc <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e0d7      	b.n	8001cbe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b0e:	4b4b      	ldr	r3, [pc, #300]	@ (8001c3c <HAL_RCC_OscConfig+0x4ac>)
 8001b10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d0ee      	beq.n	8001af8 <HAL_RCC_OscConfig+0x368>
 8001b1a:	e014      	b.n	8001b46 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b1c:	f7ff f8ee 	bl	8000cfc <HAL_GetTick>
 8001b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b22:	e00a      	b.n	8001b3a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b24:	f7ff f8ea 	bl	8000cfc <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e0c1      	b.n	8001cbe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b3a:	4b40      	ldr	r3, [pc, #256]	@ (8001c3c <HAL_RCC_OscConfig+0x4ac>)
 8001b3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1ee      	bne.n	8001b24 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b46:	7dfb      	ldrb	r3, [r7, #23]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d105      	bne.n	8001b58 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b4c:	4b3b      	ldr	r3, [pc, #236]	@ (8001c3c <HAL_RCC_OscConfig+0x4ac>)
 8001b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b50:	4a3a      	ldr	r2, [pc, #232]	@ (8001c3c <HAL_RCC_OscConfig+0x4ac>)
 8001b52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b56:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f000 80ad 	beq.w	8001cbc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b62:	4b36      	ldr	r3, [pc, #216]	@ (8001c3c <HAL_RCC_OscConfig+0x4ac>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f003 030c 	and.w	r3, r3, #12
 8001b6a:	2b08      	cmp	r3, #8
 8001b6c:	d060      	beq.n	8001c30 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d145      	bne.n	8001c02 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b76:	4b33      	ldr	r3, [pc, #204]	@ (8001c44 <HAL_RCC_OscConfig+0x4b4>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7c:	f7ff f8be 	bl	8000cfc <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b84:	f7ff f8ba 	bl	8000cfc <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e093      	b.n	8001cbe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b96:	4b29      	ldr	r3, [pc, #164]	@ (8001c3c <HAL_RCC_OscConfig+0x4ac>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1f0      	bne.n	8001b84 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	69da      	ldr	r2, [r3, #28]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a1b      	ldr	r3, [r3, #32]
 8001baa:	431a      	orrs	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb0:	019b      	lsls	r3, r3, #6
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bb8:	085b      	lsrs	r3, r3, #1
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	041b      	lsls	r3, r3, #16
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bc4:	061b      	lsls	r3, r3, #24
 8001bc6:	431a      	orrs	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bcc:	071b      	lsls	r3, r3, #28
 8001bce:	491b      	ldr	r1, [pc, #108]	@ (8001c3c <HAL_RCC_OscConfig+0x4ac>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bd4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c44 <HAL_RCC_OscConfig+0x4b4>)
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bda:	f7ff f88f 	bl	8000cfc <HAL_GetTick>
 8001bde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001be0:	e008      	b.n	8001bf4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001be2:	f7ff f88b 	bl	8000cfc <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e064      	b.n	8001cbe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bf4:	4b11      	ldr	r3, [pc, #68]	@ (8001c3c <HAL_RCC_OscConfig+0x4ac>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d0f0      	beq.n	8001be2 <HAL_RCC_OscConfig+0x452>
 8001c00:	e05c      	b.n	8001cbc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c02:	4b10      	ldr	r3, [pc, #64]	@ (8001c44 <HAL_RCC_OscConfig+0x4b4>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c08:	f7ff f878 	bl	8000cfc <HAL_GetTick>
 8001c0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c0e:	e008      	b.n	8001c22 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c10:	f7ff f874 	bl	8000cfc <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e04d      	b.n	8001cbe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c22:	4b06      	ldr	r3, [pc, #24]	@ (8001c3c <HAL_RCC_OscConfig+0x4ac>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1f0      	bne.n	8001c10 <HAL_RCC_OscConfig+0x480>
 8001c2e:	e045      	b.n	8001cbc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d107      	bne.n	8001c48 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e040      	b.n	8001cbe <HAL_RCC_OscConfig+0x52e>
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	40007000 	.word	0x40007000
 8001c44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c48:	4b1f      	ldr	r3, [pc, #124]	@ (8001cc8 <HAL_RCC_OscConfig+0x538>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d030      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d129      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d122      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001c78:	4013      	ands	r3, r2
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001c7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d119      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c8e:	085b      	lsrs	r3, r3, #1
 8001c90:	3b01      	subs	r3, #1
 8001c92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d10f      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ca2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d107      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d001      	beq.n	8001cbc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e000      	b.n	8001cbe <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3718      	adds	r7, #24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40023800 	.word	0x40023800

08001ccc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e041      	b.n	8001d62 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d106      	bne.n	8001cf8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7fe fe90 	bl	8000a18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2202      	movs	r2, #2
 8001cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3304      	adds	r3, #4
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4610      	mov	r0, r2
 8001d0c:	f000 fa28 	bl	8002160 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
	...

08001d6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d109      	bne.n	8001d90 <HAL_TIM_PWM_Start+0x24>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	bf14      	ite	ne
 8001d88:	2301      	movne	r3, #1
 8001d8a:	2300      	moveq	r3, #0
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	e022      	b.n	8001dd6 <HAL_TIM_PWM_Start+0x6a>
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	2b04      	cmp	r3, #4
 8001d94:	d109      	bne.n	8001daa <HAL_TIM_PWM_Start+0x3e>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	bf14      	ite	ne
 8001da2:	2301      	movne	r3, #1
 8001da4:	2300      	moveq	r3, #0
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	e015      	b.n	8001dd6 <HAL_TIM_PWM_Start+0x6a>
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	2b08      	cmp	r3, #8
 8001dae:	d109      	bne.n	8001dc4 <HAL_TIM_PWM_Start+0x58>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	bf14      	ite	ne
 8001dbc:	2301      	movne	r3, #1
 8001dbe:	2300      	moveq	r3, #0
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	e008      	b.n	8001dd6 <HAL_TIM_PWM_Start+0x6a>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	bf14      	ite	ne
 8001dd0:	2301      	movne	r3, #1
 8001dd2:	2300      	moveq	r3, #0
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e07c      	b.n	8001ed8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d104      	bne.n	8001dee <HAL_TIM_PWM_Start+0x82>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2202      	movs	r2, #2
 8001de8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001dec:	e013      	b.n	8001e16 <HAL_TIM_PWM_Start+0xaa>
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	2b04      	cmp	r3, #4
 8001df2:	d104      	bne.n	8001dfe <HAL_TIM_PWM_Start+0x92>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2202      	movs	r2, #2
 8001df8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001dfc:	e00b      	b.n	8001e16 <HAL_TIM_PWM_Start+0xaa>
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	2b08      	cmp	r3, #8
 8001e02:	d104      	bne.n	8001e0e <HAL_TIM_PWM_Start+0xa2>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2202      	movs	r2, #2
 8001e08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e0c:	e003      	b.n	8001e16 <HAL_TIM_PWM_Start+0xaa>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2202      	movs	r2, #2
 8001e12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	6839      	ldr	r1, [r7, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f000 fbfa 	bl	8002618 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a2d      	ldr	r2, [pc, #180]	@ (8001ee0 <HAL_TIM_PWM_Start+0x174>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d004      	beq.n	8001e38 <HAL_TIM_PWM_Start+0xcc>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a2c      	ldr	r2, [pc, #176]	@ (8001ee4 <HAL_TIM_PWM_Start+0x178>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d101      	bne.n	8001e3c <HAL_TIM_PWM_Start+0xd0>
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e000      	b.n	8001e3e <HAL_TIM_PWM_Start+0xd2>
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d007      	beq.n	8001e52 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e50:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a22      	ldr	r2, [pc, #136]	@ (8001ee0 <HAL_TIM_PWM_Start+0x174>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d022      	beq.n	8001ea2 <HAL_TIM_PWM_Start+0x136>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e64:	d01d      	beq.n	8001ea2 <HAL_TIM_PWM_Start+0x136>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a1f      	ldr	r2, [pc, #124]	@ (8001ee8 <HAL_TIM_PWM_Start+0x17c>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d018      	beq.n	8001ea2 <HAL_TIM_PWM_Start+0x136>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a1d      	ldr	r2, [pc, #116]	@ (8001eec <HAL_TIM_PWM_Start+0x180>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d013      	beq.n	8001ea2 <HAL_TIM_PWM_Start+0x136>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ef0 <HAL_TIM_PWM_Start+0x184>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d00e      	beq.n	8001ea2 <HAL_TIM_PWM_Start+0x136>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a16      	ldr	r2, [pc, #88]	@ (8001ee4 <HAL_TIM_PWM_Start+0x178>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d009      	beq.n	8001ea2 <HAL_TIM_PWM_Start+0x136>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a18      	ldr	r2, [pc, #96]	@ (8001ef4 <HAL_TIM_PWM_Start+0x188>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d004      	beq.n	8001ea2 <HAL_TIM_PWM_Start+0x136>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a16      	ldr	r2, [pc, #88]	@ (8001ef8 <HAL_TIM_PWM_Start+0x18c>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d111      	bne.n	8001ec6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 0307 	and.w	r3, r3, #7
 8001eac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2b06      	cmp	r3, #6
 8001eb2:	d010      	beq.n	8001ed6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f042 0201 	orr.w	r2, r2, #1
 8001ec2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ec4:	e007      	b.n	8001ed6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f042 0201 	orr.w	r2, r2, #1
 8001ed4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40010000 	.word	0x40010000
 8001ee4:	40010400 	.word	0x40010400
 8001ee8:	40000400 	.word	0x40000400
 8001eec:	40000800 	.word	0x40000800
 8001ef0:	40000c00 	.word	0x40000c00
 8001ef4:	40014000 	.word	0x40014000
 8001ef8:	40001800 	.word	0x40001800

08001efc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	6839      	ldr	r1, [r7, #0]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f000 fb82 	bl	8002618 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a2e      	ldr	r2, [pc, #184]	@ (8001fd4 <HAL_TIM_PWM_Stop+0xd8>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d004      	beq.n	8001f28 <HAL_TIM_PWM_Stop+0x2c>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a2d      	ldr	r2, [pc, #180]	@ (8001fd8 <HAL_TIM_PWM_Stop+0xdc>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d101      	bne.n	8001f2c <HAL_TIM_PWM_Stop+0x30>
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e000      	b.n	8001f2e <HAL_TIM_PWM_Stop+0x32>
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d017      	beq.n	8001f62 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6a1a      	ldr	r2, [r3, #32]
 8001f38:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d10f      	bne.n	8001f62 <HAL_TIM_PWM_Stop+0x66>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	6a1a      	ldr	r2, [r3, #32]
 8001f48:	f240 4344 	movw	r3, #1092	@ 0x444
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d107      	bne.n	8001f62 <HAL_TIM_PWM_Stop+0x66>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f60:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6a1a      	ldr	r2, [r3, #32]
 8001f68:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d10f      	bne.n	8001f92 <HAL_TIM_PWM_Stop+0x96>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6a1a      	ldr	r2, [r3, #32]
 8001f78:	f240 4344 	movw	r3, #1092	@ 0x444
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d107      	bne.n	8001f92 <HAL_TIM_PWM_Stop+0x96>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 0201 	bic.w	r2, r2, #1
 8001f90:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d104      	bne.n	8001fa2 <HAL_TIM_PWM_Stop+0xa6>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001fa0:	e013      	b.n	8001fca <HAL_TIM_PWM_Stop+0xce>
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	2b04      	cmp	r3, #4
 8001fa6:	d104      	bne.n	8001fb2 <HAL_TIM_PWM_Stop+0xb6>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001fb0:	e00b      	b.n	8001fca <HAL_TIM_PWM_Stop+0xce>
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	2b08      	cmp	r3, #8
 8001fb6:	d104      	bne.n	8001fc2 <HAL_TIM_PWM_Stop+0xc6>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001fc0:	e003      	b.n	8001fca <HAL_TIM_PWM_Stop+0xce>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40010000 	.word	0x40010000
 8001fd8:	40010400 	.word	0x40010400

08001fdc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d101      	bne.n	8001ffa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	e0ae      	b.n	8002158 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2b0c      	cmp	r3, #12
 8002006:	f200 809f 	bhi.w	8002148 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800200a:	a201      	add	r2, pc, #4	@ (adr r2, 8002010 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800200c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002010:	08002045 	.word	0x08002045
 8002014:	08002149 	.word	0x08002149
 8002018:	08002149 	.word	0x08002149
 800201c:	08002149 	.word	0x08002149
 8002020:	08002085 	.word	0x08002085
 8002024:	08002149 	.word	0x08002149
 8002028:	08002149 	.word	0x08002149
 800202c:	08002149 	.word	0x08002149
 8002030:	080020c7 	.word	0x080020c7
 8002034:	08002149 	.word	0x08002149
 8002038:	08002149 	.word	0x08002149
 800203c:	08002149 	.word	0x08002149
 8002040:	08002107 	.word	0x08002107
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68b9      	ldr	r1, [r7, #8]
 800204a:	4618      	mov	r0, r3
 800204c:	f000 f934 	bl	80022b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	699a      	ldr	r2, [r3, #24]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f042 0208 	orr.w	r2, r2, #8
 800205e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	699a      	ldr	r2, [r3, #24]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f022 0204 	bic.w	r2, r2, #4
 800206e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6999      	ldr	r1, [r3, #24]
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	691a      	ldr	r2, [r3, #16]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	430a      	orrs	r2, r1
 8002080:	619a      	str	r2, [r3, #24]
      break;
 8002082:	e064      	b.n	800214e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	68b9      	ldr	r1, [r7, #8]
 800208a:	4618      	mov	r0, r3
 800208c:	f000 f984 	bl	8002398 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	699a      	ldr	r2, [r3, #24]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800209e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	699a      	ldr	r2, [r3, #24]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6999      	ldr	r1, [r3, #24]
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	021a      	lsls	r2, r3, #8
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	430a      	orrs	r2, r1
 80020c2:	619a      	str	r2, [r3, #24]
      break;
 80020c4:	e043      	b.n	800214e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68b9      	ldr	r1, [r7, #8]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f000 f9d9 	bl	8002484 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	69da      	ldr	r2, [r3, #28]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f042 0208 	orr.w	r2, r2, #8
 80020e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	69da      	ldr	r2, [r3, #28]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 0204 	bic.w	r2, r2, #4
 80020f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	69d9      	ldr	r1, [r3, #28]
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	691a      	ldr	r2, [r3, #16]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	430a      	orrs	r2, r1
 8002102:	61da      	str	r2, [r3, #28]
      break;
 8002104:	e023      	b.n	800214e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68b9      	ldr	r1, [r7, #8]
 800210c:	4618      	mov	r0, r3
 800210e:	f000 fa2d 	bl	800256c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	69da      	ldr	r2, [r3, #28]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002120:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	69da      	ldr	r2, [r3, #28]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002130:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	69d9      	ldr	r1, [r3, #28]
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	021a      	lsls	r2, r3, #8
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	430a      	orrs	r2, r1
 8002144:	61da      	str	r2, [r3, #28]
      break;
 8002146:	e002      	b.n	800214e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	75fb      	strb	r3, [r7, #23]
      break;
 800214c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002156:	7dfb      	ldrb	r3, [r7, #23]
}
 8002158:	4618      	mov	r0, r3
 800215a:	3718      	adds	r7, #24
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a46      	ldr	r2, [pc, #280]	@ (800228c <TIM_Base_SetConfig+0x12c>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d013      	beq.n	80021a0 <TIM_Base_SetConfig+0x40>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800217e:	d00f      	beq.n	80021a0 <TIM_Base_SetConfig+0x40>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a43      	ldr	r2, [pc, #268]	@ (8002290 <TIM_Base_SetConfig+0x130>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d00b      	beq.n	80021a0 <TIM_Base_SetConfig+0x40>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a42      	ldr	r2, [pc, #264]	@ (8002294 <TIM_Base_SetConfig+0x134>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d007      	beq.n	80021a0 <TIM_Base_SetConfig+0x40>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a41      	ldr	r2, [pc, #260]	@ (8002298 <TIM_Base_SetConfig+0x138>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d003      	beq.n	80021a0 <TIM_Base_SetConfig+0x40>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a40      	ldr	r2, [pc, #256]	@ (800229c <TIM_Base_SetConfig+0x13c>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d108      	bne.n	80021b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a35      	ldr	r2, [pc, #212]	@ (800228c <TIM_Base_SetConfig+0x12c>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d02b      	beq.n	8002212 <TIM_Base_SetConfig+0xb2>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021c0:	d027      	beq.n	8002212 <TIM_Base_SetConfig+0xb2>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a32      	ldr	r2, [pc, #200]	@ (8002290 <TIM_Base_SetConfig+0x130>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d023      	beq.n	8002212 <TIM_Base_SetConfig+0xb2>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a31      	ldr	r2, [pc, #196]	@ (8002294 <TIM_Base_SetConfig+0x134>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d01f      	beq.n	8002212 <TIM_Base_SetConfig+0xb2>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a30      	ldr	r2, [pc, #192]	@ (8002298 <TIM_Base_SetConfig+0x138>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d01b      	beq.n	8002212 <TIM_Base_SetConfig+0xb2>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a2f      	ldr	r2, [pc, #188]	@ (800229c <TIM_Base_SetConfig+0x13c>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d017      	beq.n	8002212 <TIM_Base_SetConfig+0xb2>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a2e      	ldr	r2, [pc, #184]	@ (80022a0 <TIM_Base_SetConfig+0x140>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d013      	beq.n	8002212 <TIM_Base_SetConfig+0xb2>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a2d      	ldr	r2, [pc, #180]	@ (80022a4 <TIM_Base_SetConfig+0x144>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d00f      	beq.n	8002212 <TIM_Base_SetConfig+0xb2>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a2c      	ldr	r2, [pc, #176]	@ (80022a8 <TIM_Base_SetConfig+0x148>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d00b      	beq.n	8002212 <TIM_Base_SetConfig+0xb2>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a2b      	ldr	r2, [pc, #172]	@ (80022ac <TIM_Base_SetConfig+0x14c>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d007      	beq.n	8002212 <TIM_Base_SetConfig+0xb2>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a2a      	ldr	r2, [pc, #168]	@ (80022b0 <TIM_Base_SetConfig+0x150>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d003      	beq.n	8002212 <TIM_Base_SetConfig+0xb2>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a29      	ldr	r2, [pc, #164]	@ (80022b4 <TIM_Base_SetConfig+0x154>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d108      	bne.n	8002224 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002218:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	4313      	orrs	r3, r2
 8002222:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	4313      	orrs	r3, r2
 8002230:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a10      	ldr	r2, [pc, #64]	@ (800228c <TIM_Base_SetConfig+0x12c>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d003      	beq.n	8002258 <TIM_Base_SetConfig+0xf8>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a12      	ldr	r2, [pc, #72]	@ (800229c <TIM_Base_SetConfig+0x13c>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d103      	bne.n	8002260 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	691a      	ldr	r2, [r3, #16]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b01      	cmp	r3, #1
 8002270:	d105      	bne.n	800227e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	f023 0201 	bic.w	r2, r3, #1
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	611a      	str	r2, [r3, #16]
  }
}
 800227e:	bf00      	nop
 8002280:	3714      	adds	r7, #20
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	40010000 	.word	0x40010000
 8002290:	40000400 	.word	0x40000400
 8002294:	40000800 	.word	0x40000800
 8002298:	40000c00 	.word	0x40000c00
 800229c:	40010400 	.word	0x40010400
 80022a0:	40014000 	.word	0x40014000
 80022a4:	40014400 	.word	0x40014400
 80022a8:	40014800 	.word	0x40014800
 80022ac:	40001800 	.word	0x40001800
 80022b0:	40001c00 	.word	0x40001c00
 80022b4:	40002000 	.word	0x40002000

080022b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b087      	sub	sp, #28
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a1b      	ldr	r3, [r3, #32]
 80022c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a1b      	ldr	r3, [r3, #32]
 80022cc:	f023 0201 	bic.w	r2, r3, #1
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f023 0303 	bic.w	r3, r3, #3
 80022ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68fa      	ldr	r2, [r7, #12]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	f023 0302 	bic.w	r3, r3, #2
 8002300:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	697a      	ldr	r2, [r7, #20]
 8002308:	4313      	orrs	r3, r2
 800230a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a20      	ldr	r2, [pc, #128]	@ (8002390 <TIM_OC1_SetConfig+0xd8>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d003      	beq.n	800231c <TIM_OC1_SetConfig+0x64>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a1f      	ldr	r2, [pc, #124]	@ (8002394 <TIM_OC1_SetConfig+0xdc>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d10c      	bne.n	8002336 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	f023 0308 	bic.w	r3, r3, #8
 8002322:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	4313      	orrs	r3, r2
 800232c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	f023 0304 	bic.w	r3, r3, #4
 8002334:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a15      	ldr	r2, [pc, #84]	@ (8002390 <TIM_OC1_SetConfig+0xd8>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d003      	beq.n	8002346 <TIM_OC1_SetConfig+0x8e>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a14      	ldr	r2, [pc, #80]	@ (8002394 <TIM_OC1_SetConfig+0xdc>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d111      	bne.n	800236a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800234c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002354:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	4313      	orrs	r3, r2
 800235e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	4313      	orrs	r3, r2
 8002368:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	697a      	ldr	r2, [r7, #20]
 8002382:	621a      	str	r2, [r3, #32]
}
 8002384:	bf00      	nop
 8002386:	371c      	adds	r7, #28
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	40010000 	.word	0x40010000
 8002394:	40010400 	.word	0x40010400

08002398 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002398:	b480      	push	{r7}
 800239a:	b087      	sub	sp, #28
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	f023 0210 	bic.w	r2, r3, #16
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80023c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	021b      	lsls	r3, r3, #8
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	4313      	orrs	r3, r2
 80023da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	f023 0320 	bic.w	r3, r3, #32
 80023e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	011b      	lsls	r3, r3, #4
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a22      	ldr	r2, [pc, #136]	@ (800247c <TIM_OC2_SetConfig+0xe4>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d003      	beq.n	8002400 <TIM_OC2_SetConfig+0x68>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a21      	ldr	r2, [pc, #132]	@ (8002480 <TIM_OC2_SetConfig+0xe8>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d10d      	bne.n	800241c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002406:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	011b      	lsls	r3, r3, #4
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	4313      	orrs	r3, r2
 8002412:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800241a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a17      	ldr	r2, [pc, #92]	@ (800247c <TIM_OC2_SetConfig+0xe4>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d003      	beq.n	800242c <TIM_OC2_SetConfig+0x94>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4a16      	ldr	r2, [pc, #88]	@ (8002480 <TIM_OC2_SetConfig+0xe8>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d113      	bne.n	8002454 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002432:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800243a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	695b      	ldr	r3, [r3, #20]
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	4313      	orrs	r3, r2
 8002446:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	4313      	orrs	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68fa      	ldr	r2, [r7, #12]
 800245e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	621a      	str	r2, [r3, #32]
}
 800246e:	bf00      	nop
 8002470:	371c      	adds	r7, #28
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	40010000 	.word	0x40010000
 8002480:	40010400 	.word	0x40010400

08002484 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002484:	b480      	push	{r7}
 8002486:	b087      	sub	sp, #28
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f023 0303 	bic.w	r3, r3, #3
 80024ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80024cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	021b      	lsls	r3, r3, #8
 80024d4:	697a      	ldr	r2, [r7, #20]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a21      	ldr	r2, [pc, #132]	@ (8002564 <TIM_OC3_SetConfig+0xe0>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d003      	beq.n	80024ea <TIM_OC3_SetConfig+0x66>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a20      	ldr	r2, [pc, #128]	@ (8002568 <TIM_OC3_SetConfig+0xe4>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d10d      	bne.n	8002506 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80024f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	021b      	lsls	r3, r3, #8
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002504:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a16      	ldr	r2, [pc, #88]	@ (8002564 <TIM_OC3_SetConfig+0xe0>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d003      	beq.n	8002516 <TIM_OC3_SetConfig+0x92>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a15      	ldr	r2, [pc, #84]	@ (8002568 <TIM_OC3_SetConfig+0xe4>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d113      	bne.n	800253e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800251c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002524:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	011b      	lsls	r3, r3, #4
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	4313      	orrs	r3, r2
 8002530:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	011b      	lsls	r3, r3, #4
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	4313      	orrs	r3, r2
 800253c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	621a      	str	r2, [r3, #32]
}
 8002558:	bf00      	nop
 800255a:	371c      	adds	r7, #28
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	40010000 	.word	0x40010000
 8002568:	40010400 	.word	0x40010400

0800256c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800256c:	b480      	push	{r7}
 800256e:	b087      	sub	sp, #28
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800259a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	021b      	lsls	r3, r3, #8
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80025b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	031b      	lsls	r3, r3, #12
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a12      	ldr	r2, [pc, #72]	@ (8002610 <TIM_OC4_SetConfig+0xa4>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d003      	beq.n	80025d4 <TIM_OC4_SetConfig+0x68>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a11      	ldr	r2, [pc, #68]	@ (8002614 <TIM_OC4_SetConfig+0xa8>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d109      	bne.n	80025e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80025da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	695b      	ldr	r3, [r3, #20]
 80025e0:	019b      	lsls	r3, r3, #6
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	697a      	ldr	r2, [r7, #20]
 80025ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685a      	ldr	r2, [r3, #4]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	621a      	str	r2, [r3, #32]
}
 8002602:	bf00      	nop
 8002604:	371c      	adds	r7, #28
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	40010000 	.word	0x40010000
 8002614:	40010400 	.word	0x40010400

08002618 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002618:	b480      	push	{r7}
 800261a:	b087      	sub	sp, #28
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	f003 031f 	and.w	r3, r3, #31
 800262a:	2201      	movs	r2, #1
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6a1a      	ldr	r2, [r3, #32]
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	43db      	mvns	r3, r3
 800263a:	401a      	ands	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6a1a      	ldr	r2, [r3, #32]
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	f003 031f 	and.w	r3, r3, #31
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	fa01 f303 	lsl.w	r3, r1, r3
 8002650:	431a      	orrs	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	621a      	str	r2, [r3, #32]
}
 8002656:	bf00      	nop
 8002658:	371c      	adds	r7, #28
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
	...

08002664 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002674:	2b01      	cmp	r3, #1
 8002676:	d101      	bne.n	800267c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002678:	2302      	movs	r3, #2
 800267a:	e05a      	b.n	8002732 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2202      	movs	r2, #2
 8002688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a21      	ldr	r2, [pc, #132]	@ (8002740 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d022      	beq.n	8002706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026c8:	d01d      	beq.n	8002706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a1d      	ldr	r2, [pc, #116]	@ (8002744 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d018      	beq.n	8002706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a1b      	ldr	r2, [pc, #108]	@ (8002748 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d013      	beq.n	8002706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a1a      	ldr	r2, [pc, #104]	@ (800274c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d00e      	beq.n	8002706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a18      	ldr	r2, [pc, #96]	@ (8002750 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d009      	beq.n	8002706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a17      	ldr	r2, [pc, #92]	@ (8002754 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d004      	beq.n	8002706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a15      	ldr	r2, [pc, #84]	@ (8002758 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d10c      	bne.n	8002720 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800270c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	68ba      	ldr	r2, [r7, #8]
 8002714:	4313      	orrs	r3, r2
 8002716:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68ba      	ldr	r2, [r7, #8]
 800271e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3714      	adds	r7, #20
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	40010000 	.word	0x40010000
 8002744:	40000400 	.word	0x40000400
 8002748:	40000800 	.word	0x40000800
 800274c:	40000c00 	.word	0x40000c00
 8002750:	40010400 	.word	0x40010400
 8002754:	40014000 	.word	0x40014000
 8002758:	40001800 	.word	0x40001800

0800275c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e042      	b.n	80027f4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d106      	bne.n	8002788 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f7fe f9a0 	bl	8000ac8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2224      	movs	r2, #36	@ 0x24
 800278c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68da      	ldr	r2, [r3, #12]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800279e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 f88b 	bl	80028bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	691a      	ldr	r2, [r3, #16]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80027b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	695a      	ldr	r2, [r3, #20]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80027c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68da      	ldr	r2, [r3, #12]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80027d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2220      	movs	r2, #32
 80027e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2220      	movs	r2, #32
 80027e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3708      	adds	r7, #8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	4613      	mov	r3, r2
 8002808:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b20      	cmp	r3, #32
 8002814:	d112      	bne.n	800283c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d002      	beq.n	8002822 <HAL_UART_Receive_IT+0x26>
 800281c:	88fb      	ldrh	r3, [r7, #6]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e00b      	b.n	800283e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800282c:	88fb      	ldrh	r3, [r7, #6]
 800282e:	461a      	mov	r2, r3
 8002830:	68b9      	ldr	r1, [r7, #8]
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f000 f807 	bl	8002846 <UART_Start_Receive_IT>
 8002838:	4603      	mov	r3, r0
 800283a:	e000      	b.n	800283e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800283c:	2302      	movs	r3, #2
  }
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002846:	b480      	push	{r7}
 8002848:	b085      	sub	sp, #20
 800284a:	af00      	add	r7, sp, #0
 800284c:	60f8      	str	r0, [r7, #12]
 800284e:	60b9      	str	r1, [r7, #8]
 8002850:	4613      	mov	r3, r2
 8002852:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	68ba      	ldr	r2, [r7, #8]
 8002858:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	88fa      	ldrh	r2, [r7, #6]
 800285e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	88fa      	ldrh	r2, [r7, #6]
 8002864:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2222      	movs	r2, #34	@ 0x22
 8002870:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d007      	beq.n	800288c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68da      	ldr	r2, [r3, #12]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800288a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	695a      	ldr	r2, [r3, #20]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f042 0201 	orr.w	r2, r2, #1
 800289a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68da      	ldr	r2, [r3, #12]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f042 0220 	orr.w	r2, r2, #32
 80028aa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3714      	adds	r7, #20
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
	...

080028bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028c0:	b0c0      	sub	sp, #256	@ 0x100
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80028d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028d8:	68d9      	ldr	r1, [r3, #12]
 80028da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	ea40 0301 	orr.w	r3, r0, r1
 80028e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	431a      	orrs	r2, r3
 80028f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	431a      	orrs	r2, r3
 80028fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	4313      	orrs	r3, r2
 8002904:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002914:	f021 010c 	bic.w	r1, r1, #12
 8002918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002922:	430b      	orrs	r3, r1
 8002924:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002936:	6999      	ldr	r1, [r3, #24]
 8002938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	ea40 0301 	orr.w	r3, r0, r1
 8002942:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	4b8f      	ldr	r3, [pc, #572]	@ (8002b88 <UART_SetConfig+0x2cc>)
 800294c:	429a      	cmp	r2, r3
 800294e:	d005      	beq.n	800295c <UART_SetConfig+0xa0>
 8002950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	4b8d      	ldr	r3, [pc, #564]	@ (8002b8c <UART_SetConfig+0x2d0>)
 8002958:	429a      	cmp	r2, r3
 800295a:	d104      	bne.n	8002966 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800295c:	f7fe fd5a 	bl	8001414 <HAL_RCC_GetPCLK2Freq>
 8002960:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002964:	e003      	b.n	800296e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002966:	f7fe fd41 	bl	80013ec <HAL_RCC_GetPCLK1Freq>
 800296a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800296e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002972:	69db      	ldr	r3, [r3, #28]
 8002974:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002978:	f040 810c 	bne.w	8002b94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800297c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002980:	2200      	movs	r2, #0
 8002982:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002986:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800298a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800298e:	4622      	mov	r2, r4
 8002990:	462b      	mov	r3, r5
 8002992:	1891      	adds	r1, r2, r2
 8002994:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002996:	415b      	adcs	r3, r3
 8002998:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800299a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800299e:	4621      	mov	r1, r4
 80029a0:	eb12 0801 	adds.w	r8, r2, r1
 80029a4:	4629      	mov	r1, r5
 80029a6:	eb43 0901 	adc.w	r9, r3, r1
 80029aa:	f04f 0200 	mov.w	r2, #0
 80029ae:	f04f 0300 	mov.w	r3, #0
 80029b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029be:	4690      	mov	r8, r2
 80029c0:	4699      	mov	r9, r3
 80029c2:	4623      	mov	r3, r4
 80029c4:	eb18 0303 	adds.w	r3, r8, r3
 80029c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80029cc:	462b      	mov	r3, r5
 80029ce:	eb49 0303 	adc.w	r3, r9, r3
 80029d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80029d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80029e2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80029e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80029ea:	460b      	mov	r3, r1
 80029ec:	18db      	adds	r3, r3, r3
 80029ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80029f0:	4613      	mov	r3, r2
 80029f2:	eb42 0303 	adc.w	r3, r2, r3
 80029f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80029f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80029fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002a00:	f7fd fc00 	bl	8000204 <__aeabi_uldivmod>
 8002a04:	4602      	mov	r2, r0
 8002a06:	460b      	mov	r3, r1
 8002a08:	4b61      	ldr	r3, [pc, #388]	@ (8002b90 <UART_SetConfig+0x2d4>)
 8002a0a:	fba3 2302 	umull	r2, r3, r3, r2
 8002a0e:	095b      	lsrs	r3, r3, #5
 8002a10:	011c      	lsls	r4, r3, #4
 8002a12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a16:	2200      	movs	r2, #0
 8002a18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002a1c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002a20:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002a24:	4642      	mov	r2, r8
 8002a26:	464b      	mov	r3, r9
 8002a28:	1891      	adds	r1, r2, r2
 8002a2a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002a2c:	415b      	adcs	r3, r3
 8002a2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002a34:	4641      	mov	r1, r8
 8002a36:	eb12 0a01 	adds.w	sl, r2, r1
 8002a3a:	4649      	mov	r1, r9
 8002a3c:	eb43 0b01 	adc.w	fp, r3, r1
 8002a40:	f04f 0200 	mov.w	r2, #0
 8002a44:	f04f 0300 	mov.w	r3, #0
 8002a48:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a4c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a54:	4692      	mov	sl, r2
 8002a56:	469b      	mov	fp, r3
 8002a58:	4643      	mov	r3, r8
 8002a5a:	eb1a 0303 	adds.w	r3, sl, r3
 8002a5e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002a62:	464b      	mov	r3, r9
 8002a64:	eb4b 0303 	adc.w	r3, fp, r3
 8002a68:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002a78:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002a7c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002a80:	460b      	mov	r3, r1
 8002a82:	18db      	adds	r3, r3, r3
 8002a84:	643b      	str	r3, [r7, #64]	@ 0x40
 8002a86:	4613      	mov	r3, r2
 8002a88:	eb42 0303 	adc.w	r3, r2, r3
 8002a8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002a92:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002a96:	f7fd fbb5 	bl	8000204 <__aeabi_uldivmod>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	4611      	mov	r1, r2
 8002aa0:	4b3b      	ldr	r3, [pc, #236]	@ (8002b90 <UART_SetConfig+0x2d4>)
 8002aa2:	fba3 2301 	umull	r2, r3, r3, r1
 8002aa6:	095b      	lsrs	r3, r3, #5
 8002aa8:	2264      	movs	r2, #100	@ 0x64
 8002aaa:	fb02 f303 	mul.w	r3, r2, r3
 8002aae:	1acb      	subs	r3, r1, r3
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002ab6:	4b36      	ldr	r3, [pc, #216]	@ (8002b90 <UART_SetConfig+0x2d4>)
 8002ab8:	fba3 2302 	umull	r2, r3, r3, r2
 8002abc:	095b      	lsrs	r3, r3, #5
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002ac4:	441c      	add	r4, r3
 8002ac6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002aca:	2200      	movs	r2, #0
 8002acc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ad0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002ad4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002ad8:	4642      	mov	r2, r8
 8002ada:	464b      	mov	r3, r9
 8002adc:	1891      	adds	r1, r2, r2
 8002ade:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002ae0:	415b      	adcs	r3, r3
 8002ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ae4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002ae8:	4641      	mov	r1, r8
 8002aea:	1851      	adds	r1, r2, r1
 8002aec:	6339      	str	r1, [r7, #48]	@ 0x30
 8002aee:	4649      	mov	r1, r9
 8002af0:	414b      	adcs	r3, r1
 8002af2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002af4:	f04f 0200 	mov.w	r2, #0
 8002af8:	f04f 0300 	mov.w	r3, #0
 8002afc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002b00:	4659      	mov	r1, fp
 8002b02:	00cb      	lsls	r3, r1, #3
 8002b04:	4651      	mov	r1, sl
 8002b06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b0a:	4651      	mov	r1, sl
 8002b0c:	00ca      	lsls	r2, r1, #3
 8002b0e:	4610      	mov	r0, r2
 8002b10:	4619      	mov	r1, r3
 8002b12:	4603      	mov	r3, r0
 8002b14:	4642      	mov	r2, r8
 8002b16:	189b      	adds	r3, r3, r2
 8002b18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b1c:	464b      	mov	r3, r9
 8002b1e:	460a      	mov	r2, r1
 8002b20:	eb42 0303 	adc.w	r3, r2, r3
 8002b24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002b34:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002b38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	18db      	adds	r3, r3, r3
 8002b40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b42:	4613      	mov	r3, r2
 8002b44:	eb42 0303 	adc.w	r3, r2, r3
 8002b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002b4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002b52:	f7fd fb57 	bl	8000204 <__aeabi_uldivmod>
 8002b56:	4602      	mov	r2, r0
 8002b58:	460b      	mov	r3, r1
 8002b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b90 <UART_SetConfig+0x2d4>)
 8002b5c:	fba3 1302 	umull	r1, r3, r3, r2
 8002b60:	095b      	lsrs	r3, r3, #5
 8002b62:	2164      	movs	r1, #100	@ 0x64
 8002b64:	fb01 f303 	mul.w	r3, r1, r3
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	3332      	adds	r3, #50	@ 0x32
 8002b6e:	4a08      	ldr	r2, [pc, #32]	@ (8002b90 <UART_SetConfig+0x2d4>)
 8002b70:	fba2 2303 	umull	r2, r3, r2, r3
 8002b74:	095b      	lsrs	r3, r3, #5
 8002b76:	f003 0207 	and.w	r2, r3, #7
 8002b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4422      	add	r2, r4
 8002b82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b84:	e106      	b.n	8002d94 <UART_SetConfig+0x4d8>
 8002b86:	bf00      	nop
 8002b88:	40011000 	.word	0x40011000
 8002b8c:	40011400 	.word	0x40011400
 8002b90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002b9e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002ba2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002ba6:	4642      	mov	r2, r8
 8002ba8:	464b      	mov	r3, r9
 8002baa:	1891      	adds	r1, r2, r2
 8002bac:	6239      	str	r1, [r7, #32]
 8002bae:	415b      	adcs	r3, r3
 8002bb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002bb6:	4641      	mov	r1, r8
 8002bb8:	1854      	adds	r4, r2, r1
 8002bba:	4649      	mov	r1, r9
 8002bbc:	eb43 0501 	adc.w	r5, r3, r1
 8002bc0:	f04f 0200 	mov.w	r2, #0
 8002bc4:	f04f 0300 	mov.w	r3, #0
 8002bc8:	00eb      	lsls	r3, r5, #3
 8002bca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bce:	00e2      	lsls	r2, r4, #3
 8002bd0:	4614      	mov	r4, r2
 8002bd2:	461d      	mov	r5, r3
 8002bd4:	4643      	mov	r3, r8
 8002bd6:	18e3      	adds	r3, r4, r3
 8002bd8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002bdc:	464b      	mov	r3, r9
 8002bde:	eb45 0303 	adc.w	r3, r5, r3
 8002be2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002bf2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002bf6:	f04f 0200 	mov.w	r2, #0
 8002bfa:	f04f 0300 	mov.w	r3, #0
 8002bfe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002c02:	4629      	mov	r1, r5
 8002c04:	008b      	lsls	r3, r1, #2
 8002c06:	4621      	mov	r1, r4
 8002c08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c0c:	4621      	mov	r1, r4
 8002c0e:	008a      	lsls	r2, r1, #2
 8002c10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002c14:	f7fd faf6 	bl	8000204 <__aeabi_uldivmod>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	4b60      	ldr	r3, [pc, #384]	@ (8002da0 <UART_SetConfig+0x4e4>)
 8002c1e:	fba3 2302 	umull	r2, r3, r3, r2
 8002c22:	095b      	lsrs	r3, r3, #5
 8002c24:	011c      	lsls	r4, r3, #4
 8002c26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002c30:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002c34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002c38:	4642      	mov	r2, r8
 8002c3a:	464b      	mov	r3, r9
 8002c3c:	1891      	adds	r1, r2, r2
 8002c3e:	61b9      	str	r1, [r7, #24]
 8002c40:	415b      	adcs	r3, r3
 8002c42:	61fb      	str	r3, [r7, #28]
 8002c44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c48:	4641      	mov	r1, r8
 8002c4a:	1851      	adds	r1, r2, r1
 8002c4c:	6139      	str	r1, [r7, #16]
 8002c4e:	4649      	mov	r1, r9
 8002c50:	414b      	adcs	r3, r1
 8002c52:	617b      	str	r3, [r7, #20]
 8002c54:	f04f 0200 	mov.w	r2, #0
 8002c58:	f04f 0300 	mov.w	r3, #0
 8002c5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c60:	4659      	mov	r1, fp
 8002c62:	00cb      	lsls	r3, r1, #3
 8002c64:	4651      	mov	r1, sl
 8002c66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c6a:	4651      	mov	r1, sl
 8002c6c:	00ca      	lsls	r2, r1, #3
 8002c6e:	4610      	mov	r0, r2
 8002c70:	4619      	mov	r1, r3
 8002c72:	4603      	mov	r3, r0
 8002c74:	4642      	mov	r2, r8
 8002c76:	189b      	adds	r3, r3, r2
 8002c78:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002c7c:	464b      	mov	r3, r9
 8002c7e:	460a      	mov	r2, r1
 8002c80:	eb42 0303 	adc.w	r3, r2, r3
 8002c84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002c92:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002c94:	f04f 0200 	mov.w	r2, #0
 8002c98:	f04f 0300 	mov.w	r3, #0
 8002c9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002ca0:	4649      	mov	r1, r9
 8002ca2:	008b      	lsls	r3, r1, #2
 8002ca4:	4641      	mov	r1, r8
 8002ca6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002caa:	4641      	mov	r1, r8
 8002cac:	008a      	lsls	r2, r1, #2
 8002cae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002cb2:	f7fd faa7 	bl	8000204 <__aeabi_uldivmod>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	4611      	mov	r1, r2
 8002cbc:	4b38      	ldr	r3, [pc, #224]	@ (8002da0 <UART_SetConfig+0x4e4>)
 8002cbe:	fba3 2301 	umull	r2, r3, r3, r1
 8002cc2:	095b      	lsrs	r3, r3, #5
 8002cc4:	2264      	movs	r2, #100	@ 0x64
 8002cc6:	fb02 f303 	mul.w	r3, r2, r3
 8002cca:	1acb      	subs	r3, r1, r3
 8002ccc:	011b      	lsls	r3, r3, #4
 8002cce:	3332      	adds	r3, #50	@ 0x32
 8002cd0:	4a33      	ldr	r2, [pc, #204]	@ (8002da0 <UART_SetConfig+0x4e4>)
 8002cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd6:	095b      	lsrs	r3, r3, #5
 8002cd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cdc:	441c      	add	r4, r3
 8002cde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	673b      	str	r3, [r7, #112]	@ 0x70
 8002ce6:	677a      	str	r2, [r7, #116]	@ 0x74
 8002ce8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002cec:	4642      	mov	r2, r8
 8002cee:	464b      	mov	r3, r9
 8002cf0:	1891      	adds	r1, r2, r2
 8002cf2:	60b9      	str	r1, [r7, #8]
 8002cf4:	415b      	adcs	r3, r3
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cfc:	4641      	mov	r1, r8
 8002cfe:	1851      	adds	r1, r2, r1
 8002d00:	6039      	str	r1, [r7, #0]
 8002d02:	4649      	mov	r1, r9
 8002d04:	414b      	adcs	r3, r1
 8002d06:	607b      	str	r3, [r7, #4]
 8002d08:	f04f 0200 	mov.w	r2, #0
 8002d0c:	f04f 0300 	mov.w	r3, #0
 8002d10:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002d14:	4659      	mov	r1, fp
 8002d16:	00cb      	lsls	r3, r1, #3
 8002d18:	4651      	mov	r1, sl
 8002d1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d1e:	4651      	mov	r1, sl
 8002d20:	00ca      	lsls	r2, r1, #3
 8002d22:	4610      	mov	r0, r2
 8002d24:	4619      	mov	r1, r3
 8002d26:	4603      	mov	r3, r0
 8002d28:	4642      	mov	r2, r8
 8002d2a:	189b      	adds	r3, r3, r2
 8002d2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002d2e:	464b      	mov	r3, r9
 8002d30:	460a      	mov	r2, r1
 8002d32:	eb42 0303 	adc.w	r3, r2, r3
 8002d36:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d42:	667a      	str	r2, [r7, #100]	@ 0x64
 8002d44:	f04f 0200 	mov.w	r2, #0
 8002d48:	f04f 0300 	mov.w	r3, #0
 8002d4c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002d50:	4649      	mov	r1, r9
 8002d52:	008b      	lsls	r3, r1, #2
 8002d54:	4641      	mov	r1, r8
 8002d56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d5a:	4641      	mov	r1, r8
 8002d5c:	008a      	lsls	r2, r1, #2
 8002d5e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002d62:	f7fd fa4f 	bl	8000204 <__aeabi_uldivmod>
 8002d66:	4602      	mov	r2, r0
 8002d68:	460b      	mov	r3, r1
 8002d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8002da0 <UART_SetConfig+0x4e4>)
 8002d6c:	fba3 1302 	umull	r1, r3, r3, r2
 8002d70:	095b      	lsrs	r3, r3, #5
 8002d72:	2164      	movs	r1, #100	@ 0x64
 8002d74:	fb01 f303 	mul.w	r3, r1, r3
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	011b      	lsls	r3, r3, #4
 8002d7c:	3332      	adds	r3, #50	@ 0x32
 8002d7e:	4a08      	ldr	r2, [pc, #32]	@ (8002da0 <UART_SetConfig+0x4e4>)
 8002d80:	fba2 2303 	umull	r2, r3, r2, r3
 8002d84:	095b      	lsrs	r3, r3, #5
 8002d86:	f003 020f 	and.w	r2, r3, #15
 8002d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4422      	add	r2, r4
 8002d92:	609a      	str	r2, [r3, #8]
}
 8002d94:	bf00      	nop
 8002d96:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002da0:	51eb851f 	.word	0x51eb851f

08002da4 <memset>:
 8002da4:	4402      	add	r2, r0
 8002da6:	4603      	mov	r3, r0
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d100      	bne.n	8002dae <memset+0xa>
 8002dac:	4770      	bx	lr
 8002dae:	f803 1b01 	strb.w	r1, [r3], #1
 8002db2:	e7f9      	b.n	8002da8 <memset+0x4>

08002db4 <__libc_init_array>:
 8002db4:	b570      	push	{r4, r5, r6, lr}
 8002db6:	4d0d      	ldr	r5, [pc, #52]	@ (8002dec <__libc_init_array+0x38>)
 8002db8:	4c0d      	ldr	r4, [pc, #52]	@ (8002df0 <__libc_init_array+0x3c>)
 8002dba:	1b64      	subs	r4, r4, r5
 8002dbc:	10a4      	asrs	r4, r4, #2
 8002dbe:	2600      	movs	r6, #0
 8002dc0:	42a6      	cmp	r6, r4
 8002dc2:	d109      	bne.n	8002dd8 <__libc_init_array+0x24>
 8002dc4:	4d0b      	ldr	r5, [pc, #44]	@ (8002df4 <__libc_init_array+0x40>)
 8002dc6:	4c0c      	ldr	r4, [pc, #48]	@ (8002df8 <__libc_init_array+0x44>)
 8002dc8:	f000 f818 	bl	8002dfc <_init>
 8002dcc:	1b64      	subs	r4, r4, r5
 8002dce:	10a4      	asrs	r4, r4, #2
 8002dd0:	2600      	movs	r6, #0
 8002dd2:	42a6      	cmp	r6, r4
 8002dd4:	d105      	bne.n	8002de2 <__libc_init_array+0x2e>
 8002dd6:	bd70      	pop	{r4, r5, r6, pc}
 8002dd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ddc:	4798      	blx	r3
 8002dde:	3601      	adds	r6, #1
 8002de0:	e7ee      	b.n	8002dc0 <__libc_init_array+0xc>
 8002de2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002de6:	4798      	blx	r3
 8002de8:	3601      	adds	r6, #1
 8002dea:	e7f2      	b.n	8002dd2 <__libc_init_array+0x1e>
 8002dec:	08002e34 	.word	0x08002e34
 8002df0:	08002e34 	.word	0x08002e34
 8002df4:	08002e34 	.word	0x08002e34
 8002df8:	08002e38 	.word	0x08002e38

08002dfc <_init>:
 8002dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dfe:	bf00      	nop
 8002e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e02:	bc08      	pop	{r3}
 8002e04:	469e      	mov	lr, r3
 8002e06:	4770      	bx	lr

08002e08 <_fini>:
 8002e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e0a:	bf00      	nop
 8002e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e0e:	bc08      	pop	{r3}
 8002e10:	469e      	mov	lr, r3
 8002e12:	4770      	bx	lr
